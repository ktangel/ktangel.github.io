(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{294:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"user-and-workspace-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#user-and-workspace-settings","aria-hidden":"true"}},[t._v("#")]),t._v(" User and Workspace Settings")]),t._v(" "),e("p",[t._v("It is easy to configure VS Code to your liking through settings. Nearly every part of VS Code's editor, user interface, and functional behavior has options you can modify.")]),t._v(" "),e("p",[t._v("VS Code provides two different scopes for settings:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("User")]),t._v(" These settings apply globally to any instance of VS Code you open")]),t._v(" "),e("li",[e("strong",[t._v("Workspace")]),t._v(" These settings are stored inside your workspace in a "),e("code",[t._v(".vscode")]),t._v(" folder and only apply when the workspace is opened. Settings defined on this scope override the user scope.")])]),t._v(" "),e("h2",{attrs:{id:"creating-user-and-workspace-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-user-and-workspace-settings","aria-hidden":"true"}},[t._v("#")]),t._v(" Creating User and Workspace Settings")]),t._v(" "),e("p",[t._v("To get to the user and workspace settings:")]),t._v(" "),e("ul",[e("li",[t._v("On a Windows computer, click "),e("strong",[t._v("File")]),t._v(" > "),e("strong",[t._v("Preferences")]),t._v(" > "),e("strong",[t._v("Settings")])]),t._v(" "),e("li",[t._v("On a Mac, click "),e("strong",[t._v("Code")]),t._v(" > "),e("strong",[t._v("Preferences")]),t._v(" > "),e("strong",[t._v("Settings")])])]),t._v(" "),e("p",[t._v("You are provided with a list of Default Settings. Copy any setting that you want to change to the appropriate "),e("code",[t._v("settings.json")]),t._v(" file. The tabs on the right let you switch quickly between the user and workspace settings files.")]),t._v(" "),e("p",[t._v("You can also open the user and workspace settings from the "),e("strong",[t._v("Command Palette")]),t._v(" ("),e("code",[t._v("kb(workbench.action.showCommands)")]),t._v(") with "),e("strong",[t._v("Preferences: Open User Settings")]),t._v(" and "),e("strong",[t._v("Preferences: Open Workspace Settings")]),t._v(" or use the keyboard shortcut ("),e("code",[t._v("kb(workbench.action.openGlobalSettings)")]),t._v(").")]),t._v(" "),e("p",[t._v("In the example below, we disabled line numbers in the editor and configured line wrapping to wrap automatically based on the size of the editor.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://code.visualstudio.com/assets/docs/getstarted/settings/settings.png",alt:"Example Settings"}})]),t._v(" "),e("p",[t._v("Changes to settings are reloaded by VS Code after the modified "),e("code",[t._v("settings.json")]),t._v(" file is saved.")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("Note:")]),t._v(" Workspace settings are useful for sharing project specific settings across a team.")])]),t._v(" "),e("h2",{attrs:{id:"settings-file-locations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settings-file-locations","aria-hidden":"true"}},[t._v("#")]),t._v(" Settings File Locations")]),t._v(" "),e("p",[t._v("Depending on your platform, the user settings file is located here:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Windows")]),t._v(" "),e("code",[t._v("%APPDATA%\\Code\\User\\settings.json")])]),t._v(" "),e("li",[e("strong",[t._v("Mac")]),t._v(" "),e("code",[t._v("$HOME/Library/Application Support/Code/User/settings.json")])]),t._v(" "),e("li",[e("strong",[t._v("Linux")]),t._v(" "),e("code",[t._v("$HOME/.config/Code/User/settings.json")])])]),t._v(" "),e("p",[t._v("The workspace setting file is located under the "),e("code",[t._v(".vscode")]),t._v(" folder in your project.")]),t._v(" "),e("h2",{attrs:{id:"default-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-settings","aria-hidden":"true"}},[t._v("#")]),t._v(" Default Settings")]),t._v(" "),e("p",[t._v("When you open settings, we show "),e("strong",[t._v("Default Settings")]),t._v(" to search and discover settings you are looking for. When you search using the big Search bar, it will not only show and highlight the settings matching your criteria, but also filter out those which are not matching. This makes finding settings quick and easy. There are actions available inside "),e("strong",[t._v("Default Settings")]),t._v(" and "),e("code",[t._v("settings.json")]),t._v(" editors which will help you quickly copy or update a setting.")]),t._v(" "),e("p",[e("img",{attrs:{alt:"settings groups",src:"https://az754404.vo.msecnd.net/public/default-settings.gif"}})]),t._v(" "),e("p",[e("strong",[t._v("Note")]),t._v(": VS Code extensions can also add their own custom settings and they will be visible in the "),e("strong",[t._v("Default Settings")]),t._v(" list at runtime.")]),t._v(" "),e("h3",{attrs:{id:"settings-groups"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settings-groups","aria-hidden":"true"}},[t._v("#")]),t._v(" Settings groups")]),t._v(" "),e("p",[t._v("Default settings are represented in groups so that you can navigate them easily. It has "),e("strong",[t._v("Most Commonly Used")]),t._v(" group on the top to see the most common customizations done by VS Code users.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://code.visualstudio.com/assets/docs/getstarted/settings/settings-groups.png",alt:"Settings Groups"}})]),t._v(" "),e("p",[t._v("Here is the "),e("router-link",{attrs:{to:"/docs/getstarted/settings.html#copy-of-default-settings"}},[t._v("copy of default settings")]),t._v(" that comes with VS Code.")],1),t._v(" "),e("h2",{attrs:{id:"language-specific-editor-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#language-specific-editor-settings","aria-hidden":"true"}},[t._v("#")]),t._v(" Language specific editor settings")]),t._v(" "),e("p",[t._v("To customize your editor by language, run the global command "),e("strong",[t._v("Preferences: Configure language specific settings...")]),t._v(" (command id: "),e("code",[t._v("workbench.action.configureLanguageBasedSettings")]),t._v(") from the "),e("strong",[t._v("Command Palette")]),t._v(" ("),e("code",[t._v("kb(workbench.action.showCommands)")]),t._v(") which opens the language picker. Selecting the language you want, opens the Settings editor with the language entry where you can add applicable settings.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://code.visualstudio.com/assets/docs/getstarted/settings/pref-config-lang-settings.png",alt:"Configure language specific settings command"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://code.visualstudio.com/assets/docs/getstarted/settings/lang-selection.png",alt:"Select language drop down"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://code.visualstudio.com/assets/docs/getstarted/settings/lang-based-settings.png",alt:"Add language specific setting"}})]),t._v(" "),e("p",[t._v("If you have a file open and you want to customize the editor for this file type, click on the Language Mode in the Status Bar to the bottom-right of the VS Code window. This opens the Language Mode picker with an option "),e("strong",[t._v("Configure 'language_name' language based settings...")]),t._v(". Selecting this opens the Settings editor with the language entry where you can add applicable settings.")]),t._v(" "),e("p",[t._v("You can also configure language based settings by directly opening "),e("code",[t._v("settings.json")]),t._v(". You can scope them to the workspace by placing them in the Workspace settings just like other settings. If you have settings defined for a language in both user and workspace scopes, then they are merged by giving precedence to the ones defined in the workspace.")]),t._v(" "),e("p",[t._v("The following examples customize editor settings for language modes "),e("code",[t._v("typescript")]),t._v(" and "),e("code",[t._v("markdown")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[typescript]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnPaste"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[markdown]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordWrap"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.renderWhitespace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"all"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.acceptSuggestionOnEnter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("You can use IntelliSense in Settings editor to help you find allowed language based settings. All editor settings and some non-editor settings are supported.")]),t._v(" "),e("h2",{attrs:{id:"settings-and-security"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settings-and-security","aria-hidden":"true"}},[t._v("#")]),t._v(" Settings and security")]),t._v(" "),e("p",[t._v("In settings, we allow you to specify some of the executables that VS Code will run to do its work. For example, you can choose which shell the Integrated Terminal should use. For enhanced security, such settings can only be defined in user settings and not at workspace scope.")]),t._v(" "),e("p",[t._v("Here is the list of settings we don't support at the workspace scope:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git.path")])]),t._v(" "),e("li",[e("code",[t._v("terminal.integrated.shell.linux")])]),t._v(" "),e("li",[e("code",[t._v("terminal.integrated.shellArgs.linux")])]),t._v(" "),e("li",[e("code",[t._v("terminal.integrated.shell.osx")])]),t._v(" "),e("li",[e("code",[t._v("terminal.integrated.shellArgs.osx")])]),t._v(" "),e("li",[e("code",[t._v("terminal.integrated.shell.windows")])]),t._v(" "),e("li",[e("code",[t._v("terminal.integrated.shellArgs.windows")])]),t._v(" "),e("li",[e("code",[t._v("terminal.external.windowsExec")])]),t._v(" "),e("li",[e("code",[t._v("terminal.external.osxExec")])]),t._v(" "),e("li",[e("code",[t._v("terminal.external.linuxExec")])])]),t._v(" "),e("p",[t._v("The first time you open a workspace which defines any of these settings, VS Code will warn you and subsequently always ignore the values after that.")]),t._v(" "),e("h3",{attrs:{id:"copy-of-default-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy-of-default-settings","aria-hidden":"true"}},[t._v("#")]),t._v(" Copy of Default Settings")]),t._v(" "),e("p",[t._v("Below are the default settings and their values.")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Most Commonly Used")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.autoSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font size in pixels.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.fontSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font family.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.fontFamily"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Consolas, 'Courier New', monospace\"")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.tabSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.renderWhitespace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.cursorStyle"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on OSX. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.multiCursorModifier"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.insertSpaces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls how lines should wrap. Can be:")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'off' (disable wrapping),")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'on' (viewport wrapping),")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordWrap"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.exclude"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.git"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.svn"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.hg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/CVS"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.DS_Store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.associations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Editor")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the diff editor shows changes in leading or trailing whitespace as diffs")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"diffEditor.ignoreTrimWhitespace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the diff editor shows +/- indicators for added/removed changes")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"diffEditor.renderIndicators"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the diff editor shows the diff side by side or inline")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"diffEditor.renderSideBySide"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if suggestions should be accepted on commit characters. For instance in JavaScript the semi-colon (';') can be a commit character that accepts a suggestion and types that character.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.acceptSuggestionOnCommitCharacter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.acceptSuggestionOnEnter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should run in a mode where it is optimized for screen readers.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.accessibilitySupport"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"auto"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor should automatically close brackets after opening them")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.autoClosingBrackets"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor should automatically adjust the indentation when users type, paste or move lines. Indentation rules of the language must be available.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.autoIndent"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor shows code lenses")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.codeLens"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should render the inline color decorators and color picker.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.colorDecorators"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.cursorBlinking"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blink"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.cursorStyle"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.detectIndentation"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor should allow to move selections via drag and drop.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.dragAndDrop"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether copying without a selection copies the current line.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.emptySelectionClipboard"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if Find in Selection flag is turned on when multiple characters or lines of text are selected in the editor")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.find.autoFindInSelection"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the Find Widget should read or modify the shared find clipboard on macOS")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.find.globalFindClipboard"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if we seed the search string in Find Widget from editor selection")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.find.seedSearchStringFromSelection"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor has code folding enabled")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.folding"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font family.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.fontFamily"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Consolas, 'Courier New', monospace\"")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables font ligatures")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.fontLigatures"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font size in pixels.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.fontSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font weight.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.fontWeight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"normal"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnPaste"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor should automatically format the line after typing")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnType"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.glyphMargin"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the cursor should be hidden in the overview ruler.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.hideCursorInOverviewRuler"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Insert spaces when pressing Tab. This setting is overridden based on the file contents when `editor.detectIndentation` is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.insertSpaces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the letter spacing in pixels.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.letterSpacing"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables the code action lightbulb")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.lightbulb.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the line height. Use 0 to compute the lineHeight from the fontSize.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.lineHeight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the display of line numbers. Possible values are 'on', 'off', and 'relative'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.lineNumbers"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should detect links and make them clickable")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.links"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Highlight matching brackets when one of them is selected.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.matchBrackets"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the minimap is shown")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.minimap.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Limit the width of the minimap to render at most a certain number of columns")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.minimap.maxColumn"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Render the actual characters on a line (as opposed to color blocks)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.minimap.renderCharacters"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the minimap slider is automatically hidden. Possible values are 'always' and 'mouseover'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.minimap.showSlider"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mouseover"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.mouseWheelScrollSensitivity"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Zoom the font of the editor when using mouse wheel and holding Ctrl")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.mouseWheelZoom"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on OSX. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.multiCursorModifier"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should highlight semantic symbol occurrences")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.occurrencesHighlight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if a border should be drawn around the overview ruler.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.overviewRulerBorder"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the number of decorations that can show up at the same position in the overview ruler")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.overviewRulerLanes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables pop-up that shows parameter documentation and type information as you type")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.parameterHints"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if suggestions should automatically show up while typing")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.quickSuggestions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"other"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"comments"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"strings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the delay in ms after which quick suggestions will show up")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.quickSuggestionsDelay"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should render control characters")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.renderControlCharacters"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should render indent guides")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.renderIndentGuides"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls how the editor should render the current line highlight, possibilities are 'none', 'gutter', 'line', and 'all'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.renderLineHighlight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.renderWhitespace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if selections have rounded corners")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.roundedSelection"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.rulers"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor will scroll beyond the last line")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.scrollBeyondLastLine"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the editor should highlight similar matches to the selection")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.selectionHighlight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the fold controls on the gutter are automatically hidden.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.showFoldingControls"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mouseover"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the editor will scroll using an animation")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.smoothScrolling"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether snippets are shown with other suggestions and how they are sorted.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.snippetSuggestions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inline"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Keep peek editors open even when double clicking their content or when hitting Escape.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.stablePeek"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Font size for the suggest widget")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.suggestFontSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Line height for the suggest widget")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.suggestLineHeight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if suggestions should automatically show up when typing trigger characters")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.suggestOnTriggerCharacters"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.tabCompletion"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.tabSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Overrides editor colors and font style from the currently selected color theme.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.tokenColorCustomizations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Remove trailing auto inserted whitespace")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.trimAutoWhitespace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Inserting and deleting whitespace follows tab stops")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.useTabStops"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether completions should be computed based on words in the document.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordBasedSuggestions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Characters that will be used as word separators when doing word related navigations or operations")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordSeparators"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"`~!@#$%^&*()-=+[{]}\\\\|;:\'\\",.<>/?"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls how lines should wrap. Can be:")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'off' (disable wrapping),")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'on' (viewport wrapping),")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordWrap"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the wrapping column of the editor when `editor.wordWrap` is 'wordWrapColumn' or 'bounded'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordWrapColumn"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the indentation of wrapped lines. Can be one of 'none', 'same' or 'indent'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wrappingIndent"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"same"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Workbench")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the visibility of the activity bar in the workbench.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.activityBar.visible"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Overrides colors from the currently selected color theme.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.colorCustomizations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Specifies the color theme used in the workbench.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.colorTheme"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Default Dark+"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.commandPalette.history"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the last typed input to the command palette should be restored when opening it the next time.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.commandPalette.preserveInput"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if editors showing a file should close automatically when the file is deleted or renamed by some other process. Disabling this will keep the editor open as dirty on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.closeOnFileDelete"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if opened editors show as preview. Preview editors are reused until they are kept (e.g. via double click or editing) and show up with an italic font style.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.enablePreview"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.enablePreviewFromQuickOpen"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the format of the label for an editor. Changing this setting can for example make it easier to understand the location of a file:")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - short:   'parent'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - medium:  'workspace/src/parent'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - long:    '/home/user/workspace/src/parent'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - default: '.../parent', when another tab shares the same title, or the relative workspace path if tabs are disabled")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.labelFormat"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls where editors open. Select 'left' or 'right' to open editors to the left or right of the currently active one. Select 'first' or 'last' to open editors independently from the currently active one.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.openPositioning"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"right"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.revealIfOpen"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.showIcons"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if opened editors should show in tabs or not.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.showTabs"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the position of the editor's tabs close buttons or disables them when set to 'off'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.tabCloseButton"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"right"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the sizing of editor tabs. Set to 'fit' to keep tabs always large enough to show the full editor label. Set to 'shrink' to allow tabs to get smaller when the available space is not enough to show all tabs at once.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.editor.tabSizing"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fit"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Specifies the icon theme used in the workbench or 'null' to not show any file icons.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.iconTheme"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vs-seti"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if Quick Open should close automatically once it loses focus.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.quickOpen.closeOnFocusLost"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether to enable the natural language search mode for settings.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.settings.enableNaturalLanguageSearch"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if opening settings also opens an editor showing all default settings.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.settings.openDefaultSettings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the location of the sidebar. It can either show on the left or right of the workbench.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.sideBar.location"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"left"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls which editor is shown at startup, if none is restored from the previous session. Select 'none' to start without an editor, 'welcomePage' to open the Welcome page (default), 'newUntitledFile' to open a new untitled file (only opening an empty workspace).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.startupEditor"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"welcomePage"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the visibility of the status bar at the bottom of the workbench.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.statusBar.visible"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When enabled, will show the watermark tips when no editor is open.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"workbench.tips.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Window")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if closing the last editor should also close the window. This setting only applies for windows that do not show folders.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.closeWhenEmpty"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If enabled, the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.enableMenuBarMnemonics"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.menuBarVisibility"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the dimensions of opening a new window when at least one window is already opened. By default, a new window will open in the center of the screen with small dimensions. When set to 'inherit', the window will get the same dimensions as the last window that was active. When set to 'maximized', the window will open maximized and fullscreen if configured to 'fullscreen'. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.newWindowDimensions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if files should open in a new window.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - default: files will open in the window with the files' folder open or the last active window unless opened via the dock or from finder (macOS only)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - on: files will open in a new window")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - off: files will open in the window with the files' folder open or the last active window")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.openFilesInNewWindow"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if folders should open in a new window or replace the last active window.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - default: folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - on: folders will open in a new window")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - off: folders will replace the last active window")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.openFoldersInNewWindow"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if a window should restore to full screen mode if it was exited in full screen mode.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.restoreFullscreen"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls how windows are being reopened after a restart. Select 'none' to always start with an empty workspace, 'one' to reopen the last window you worked on, 'folders' to reopen all windows that had folders opened or 'all' to reopen all windows of your last session.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.restoreWindows"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the window title based on the active editor. Variables are substituted based on the context:")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${activeEditorShort}: the file name (e.g. myFile.txt)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${activeEditorMedium}: the path of the file relative to the workspace folder (e.g. myFolder/myFile.txt)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${activeEditorLong}: the full path of the file (e.g. /Users/Development/myProject/myFolder/myFile.txt)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${folderName}: name of the workspace folder the file is contained in (e.g. myFolder)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${folderPath}: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${rootName}: name of the workspace (e.g. myFolder or myWorkspace)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${rootPath}: file path of the workspace (e.g. /Users/Development/myWorkspace)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${appName}: e.g. VS Code")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ${dirty}: a dirty indicator if the active editor is dirty")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ${separator}: a conditional separator (" - ") that only shows when surrounded by variables with values')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.title"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"window.zoomLevel"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Files")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.associations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When enabled, will attempt to guess the character set encoding when opening files. This setting can be configured per language too.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.autoGuessEncoding"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.autoSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the delay in ms after which a dirty file is saved automatically. Only applies when 'files.autoSave' is set to 'afterDelay'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.autoSaveDelay"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The default language mode that is assigned to new files.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.defaultLanguage"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The default character set encoding to use when reading and writing files. This setting can be configured per language too.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.encoding"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"utf8"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The default end of line character. Use \\n for LF and \\r\\n for CRLF.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.eol"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\r\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.exclude"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.git"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.svn"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.hg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/CVS"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.DS_Store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.hotExit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onExit"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When enabled, insert a final new line at the end of the file when saving it.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.insertFinalNewline"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When enabled, will trim all new lines after the final new line at the end of the file when saving it.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.trimFinalNewlines"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When enabled, will trim trailing whitespace when saving a file.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.trimTrailingWhitespace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the new experimental file watcher.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.useExperimentalFileWatcher"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.watcherExclude"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.git/objects/**"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.git/subtree-cache/**"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/node_modules/*/**"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Zen Mode")]),t._v("\n\n  // Controls if turning on Zen Mode also puts the workbench into full screen mode.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"zenMode.fullScreen"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if turning on Zen Mode also hides the activity bar at the left of the workbench.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"zenMode.hideActivityBar"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if turning on Zen Mode also hides the status bar at the bottom of the workbench.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"zenMode.hideStatusBar"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if turning on Zen Mode also hides workbench tabs.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"zenMode.hideTabs"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if a window should restore to zen mode if it was exited in zen mode.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"zenMode.restore"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n// File Explorer\n\n  // Controls if the explorer should automatically reveal and select files when opening them.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.autoReveal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if the explorer should ask for confirmation when deleting a file via the trash.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.confirmDelete"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if the explorer should ask for confirmation to move files and folders via drag and drop.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.confirmDragAndDrop"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if file decorations should use badges.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.decorations.badges"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if file decorations should use colors.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.decorations.colors"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if the explorer should allow to move files and folders via drag and drop.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.enableDragAndDrop"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls if the height of the open editors section should adapt dynamically to the number of elements or not.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.openEditors.dynamicHeight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Number of editors shown in the Open Editors pane. Set it to "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" to hide the pane.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.openEditors.visible"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  // Controls sorting order of files and folders in the explorer. In addition to the default sorting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" you can set the order to 'mixed' (files and folders sorted combined)"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 'type' (by file type)"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 'modified' (by last modified date) or 'filesFirst' (sort files before folders).\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"explorer.sortOrder"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n// Search\n\n  // Configure glob patterns for excluding files and folders in searches. Inherits all glob patterns from the files.exclude setting.\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"search.exclude"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/node_modules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/bower_components"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether to follow symlinks while searching.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"search.followSymlinks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure to include results from a global symbol search in the file results for Quick Open.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"search.quickOpen.includeSymbols"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether to use .gitignore and .ignore files when searching for files.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"search.useIgnoreFiles"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether to use ripgrep in text and file search")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"search.useRipgrep"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HTTP")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"http.proxy"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The value to send as the 'Proxy-Authorization' header for every network request.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"http.proxyAuthorization"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether the proxy server certificate should be verified against the list of supplied CAs.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"http.proxyStrictSSL"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Update")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure whether you receive automatic updates from an update channel. Requires a restart after change.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"update.channel"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Debug")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Allows setting breakpoint in any file")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug.allowBreakpointsEverywhere"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if the floating debug action bar should be hidden")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug.hideActionBar"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Show variable values inline in editor while debugging")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug.inlineValues"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls behavior of the internal debug console.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug.internalConsoleOptions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"openOnFirstSessionStart"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether debug viewlet should be open on debugging session start.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug.openDebug"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"openOnFirstSessionStart"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Automatically open explorer view on the end of a debug session")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug.openExplorerOnEnd"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls when the debug status bar should be visible")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug.showInStatusBar"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onFirstSessionStart"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"launch"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HTML")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable autoclosing of HTML tags.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.autoClosingTags"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// List of tags, comma separated, where the content shouldn't be reformatted. 'null' defaults to the 'pre' tag.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.contentUnformatted"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pre,code,textarea"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable default HTML formatter")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.enable"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// End with a newline.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.endWithNewline"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// List of tags, comma separated, that should have an extra newline before them. 'null' defaults to \"head, body, /html\".")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.extraLiners"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"head, body, /html"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Format and indent {{#foo}} and {{/foo}}.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.indentHandlebars"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indent <head> and <body> sections.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.indentInnerHtml"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Maximum number of line breaks to be preserved in one chunk. Use 'null' for unlimited.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.maxPreserveNewLines"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.preserveNewLines"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// List of tags, comma separated, that shouldn't be reformatted. 'null' defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.unformatted"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wbr"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wrap attributes.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.wrapAttributes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"auto"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Maximum amount of characters per line (0 = disable).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.format.wrapLineLength"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configures if the built-in HTML language support suggests Angular V1 tags and properties.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.suggest.angular1"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configures if the built-in HTML language support suggests HTML5 tags, properties and values.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.suggest.html5"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configures if the built-in HTML language support suggests Ionic tags, properties and values.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.suggest.ionic"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Traces the communication between VS Code and the HTML language server.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.trace.server"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configures if the built-in HTML language support validates embedded scripts.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.validate.scripts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configures if the built-in HTML language support validates embedded styles.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"html.validate.styles"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JSON")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable default JSON formatter (requires restart)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"json.format.enable"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Associate schemas to JSON files in the current project")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"json.schemas"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Traces the communication between VS Code and the JSON language server.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"json.trace.server"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Markdown")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for every newline.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.breaks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Double click in the markdown preview to switch to the editor.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.doubleClickToSwitchToEditor"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font family used in the markdown preview.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.fontFamily"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'HelveticaNeue-Light', 'Ubuntu', 'Droid Sans', sans-serif\"")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font size in pixels used in the markdown preview.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.fontSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the line height used in the markdown preview. This number is relative to the font size.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.lineHeight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable or disable conversion of URL-like text to links in the markdown preview.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.linkify"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Mark the current editor selection in the markdown preview.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.markEditorSelection"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When the markdown preview is scrolled, update the view of the editor.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.scrollEditorWithPreview"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Scrolls the markdown preview to reveal the currently selected line from the editor.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.preview.scrollPreviewWithEditorSelection"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sets how YAML front matter should be rendered in the markdown preview. 'hide' removes the front matter. Otherwise, the front matter is treated as markdown content.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.previewFrontMatter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hide"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\\' need to be written as '\\\\'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.styles"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable debug logging for the markdown extension.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"markdown.trace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PHP")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configures if the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"php.suggest.basic"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable built-in PHP validation.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"php.validate.enable"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Points to the PHP executable.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"php.validate.executablePath"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether the linter is run on save or on type.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"php.validate.run"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onSave"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeScript")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable default JavaScript formatter.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.enable"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after a comma delimiter.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterCommaDelimiter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after the constructor keyword. Requires TypeScript >= 2.3.0.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterConstructor"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after function keyword for anonymous functions.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after keywords in a control flow statement.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing JSX expression braces. Requires TypeScript >= 2.0.6.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing non empty braces. Requires TypeScript >= 2.3.0.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing non empty brackets.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing non empty parenthesis.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing template string braces. Requires TypeScript >= 2.0.6.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Defines space handling after a semicolon in a for statement.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceAfterSemicolonInForStatements"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after a binary operator.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceBeforeAndAfterBinaryOperators"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling before function argument parentheses. Requires TypeScript >= 2.1.5.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.insertSpaceBeforeFunctionParenthesis"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines whether an open brace is put onto a new line for control blocks or not.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.placeOpenBraceOnNewLineForControlBlocks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines whether an open brace is put onto a new line for functions or not.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.format.placeOpenBraceOnNewLineForFunctions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires TypeScript >=2.3.1.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.implicitProjectConfig.checkJs"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable 'experimentalDecorators' for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires TypeScript >=2.3.1.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.implicitProjectConfig.experimentalDecorators"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable including unique names from the file in JavaScript suggestion lists.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.nameSuggestions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable references CodeLens in JavaScript files.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.referencesCodeLens.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable JavaScript validation.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript.validate.enable"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable auto JSDoc comments")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"jsDocCompletion.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable auto import suggestions. Requires TypeScript >=2.6.1")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.autoImportSuggestions.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if NPM is installed for Automatic Type Acquisition.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.check.npmIsInstalled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Disables automatic type acquisition. Requires TypeScript >= 2.0.6.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.disableAutomaticTypeAcquisition"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable default TypeScript formatter.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.enable"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after a comma delimiter.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterCommaDelimiter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after the constructor keyword. Requires TypeScript >= 2.3.0.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterConstructor"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after function keyword for anonymous functions.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after keywords in a control flow statement.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing JSX expression braces. Requires TypeScript >= 2.0.6.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing non empty braces. Requires TypeScript >= 2.3.0.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing non empty brackets.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing non empty parenthesis.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after opening and before closing template string braces. Requires TypeScript >= 2.0.6.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Defines space handling after a semicolon in a for statement.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterSemicolonInForStatements"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after type assertions in TypeScript. Requires TypeScript >= 2.4.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceAfterTypeAssertion"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling after a binary operator.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceBeforeAndAfterBinaryOperators"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines space handling before function argument parentheses. Requires TypeScript >= 2.1.5.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.insertSpaceBeforeFunctionParenthesis"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines whether an open brace is put onto a new line for control blocks or not.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.placeOpenBraceOnNewLineForControlBlocks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defines whether an open brace is put onto a new line for functions or not.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.format.placeOpenBraceOnNewLineForFunctions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable implementations CodeLens. Requires TypeScript >= 2.2.0.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.implementationsCodeLens.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sets the locale used to report TypeScript errors. Requires TypeScript >= 2.6.0. Default of 'null' uses VS Code's locale for TypeScript errors.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.locale"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Specifies the path to the NPM executable used for Automatic Type Acquisition. Requires TypeScript >= 2.3.4.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.npm"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable quick suggestions when typing out an import path.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.quickSuggestionsForPaths"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable references CodeLens in TypeScript files. Requires TypeScript >= 2.0.6.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.referencesCodeLens.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Report style checks as warnings")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.reportStyleChecksAsWarnings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls auto detection of tsc tasks. 'off' disables this feature. 'build' only creates single run compile tasks. 'watch' only creates compile and watch tasks. 'on' creates both build and watch tasks. Default is 'on'.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.tsc.autoDetect"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Specifies the folder path containing the tsserver and lib*.d.ts files to use.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.tsdk"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.tsserver.log"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.tsserver.trace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Complete functions with their parameter signature.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.useCodeSnippetsOnMethodSuggest"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable TypeScript validation.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.validate.enable"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CSS")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invalid number of parameters")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.argumentsInColorFunction"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use width or height when using padding or border")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.boxModel"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When using a vendor-specific prefix make sure to also include all other vendor-specific properties")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.compatibleVendorPrefixes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use duplicate style definitions")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.duplicateProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use empty rulesets")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.emptyRules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.float"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @font-face rule must define 'src' and 'font-family' properties")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.fontFaceProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hex colors must consist of three or six hex numbers")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.hexColorLength"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.idSelector"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IE hacks are only necessary when supporting IE7 and older")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.ieHack"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.important"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Import statements do not load in parallel")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.importStatement"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.propertyIgnoredDueToDisplay"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The universal selector (*) is known to be slow")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.universalSelector"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unknown property.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.unknownProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unknown vendor specific property.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.unknownVendorSpecificProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When using a vendor-specific prefix also include the standard property")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.vendorPrefix"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// No unit for zero needed")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.lint.zeroUnits"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Traces the communication between VS Code and the CSS language server.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.trace.server"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables or disables all validations")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"css.validate"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// LESS")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invalid number of parameters")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.argumentsInColorFunction"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use width or height when using padding or border")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.boxModel"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When using a vendor-specific prefix make sure to also include all other vendor-specific properties")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.compatibleVendorPrefixes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use duplicate style definitions")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.duplicateProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use empty rulesets")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.emptyRules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.float"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @font-face rule must define 'src' and 'font-family' properties")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.fontFaceProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hex colors must consist of three or six hex numbers")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.hexColorLength"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.idSelector"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IE hacks are only necessary when supporting IE7 and older")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.ieHack"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.important"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Import statements do not load in parallel")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.importStatement"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.propertyIgnoredDueToDisplay"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The universal selector (*) is known to be slow")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.universalSelector"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unknown property.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.unknownProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unknown vendor specific property.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.unknownVendorSpecificProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When using a vendor-specific prefix also include the standard property")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.vendorPrefix"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// No unit for zero needed")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.lint.zeroUnits"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables or disables all validations")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"less.validate"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SCSS (Sass)")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invalid number of parameters")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.argumentsInColorFunction"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use width or height when using padding or border")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.boxModel"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When using a vendor-specific prefix make sure to also include all other vendor-specific properties")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.compatibleVendorPrefixes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use duplicate style definitions")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.duplicateProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do not use empty rulesets")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.emptyRules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.float"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @font-face rule must define 'src' and 'font-family' properties")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.fontFaceProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hex colors must consist of three or six hex numbers")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.hexColorLength"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.idSelector"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IE hacks are only necessary when supporting IE7 and older")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.ieHack"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.important"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Import statements do not load in parallel")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.importStatement"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.propertyIgnoredDueToDisplay"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The universal selector (*) is known to be slow")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.universalSelector"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unknown property.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.unknownProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unknown vendor specific property.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.unknownVendorSpecificProperties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When using a vendor-specific prefix also include the standard property")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.vendorPrefix"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"warning"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// No unit for zero needed")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.lint.zeroUnits"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables or disables all validations")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scss.validate"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Extensions")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Automatically update extensions")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extensions.autoUpdate"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If set to true, the notifications for extension recommendations will stop showing up.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extensions.ignoreRecommendations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// External Terminal")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Customizes what kind of terminal to launch.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.explorerKind"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integrated"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Customizes which terminal to run on Linux.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.external.linuxExec"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xterm"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Customizes which terminal application to run on OS X.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.external.osxExec"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Terminal.app"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Customizes which terminal to run on Windows.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.external.windowsExec"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C:\\\\WINDOWS\\\\System32\\\\cmd.exe"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Integrated Terminal")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.commandsToSkipShell"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"editor.action.toggleTabFocusMode"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.debug.continue"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.debug.pause"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.debug.restart"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.debug.run"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.debug.start"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.debug.stop"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.focusActiveEditorGroup"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.focusFirstEditorGroup"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.focusSecondEditorGroup"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.focusThirdEditorGroup"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.navigateDown"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.navigateLeft"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.navigateRight"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.navigateUp"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.openNextRecentlyUsedEditorInGroup"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.openPreviousRecentlyUsedEditorInGroup"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.quickOpen"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.quickOpenPreviousEditor"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.quickOpenView"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.showCommands"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.tasks.build"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.tasks.restartTask"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.tasks.runTask"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.tasks.showLog"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.tasks.showTasks"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.tasks.terminate"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.tasks.test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.clear"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.copySelection"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.deleteWordLeft"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.deleteWordRight"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.findWidget.history.showNext"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.findWidget.history.showPrevious"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focus"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex3"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex4"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex6"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex7"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex8"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusAtIndex9"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusFindWidget"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusNext"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.focusPrevious"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.hideFindWidget"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.kill"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.new"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.paste"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.runActiveFile"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.runSelectedText"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.scrollDown"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.scrollDownPage"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.scrollToBottom"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.scrollToTop"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.scrollUp"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.scrollUpPage"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.selectAll"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.terminal.toggleTerminal"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workbench.action.togglePanel"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether to confirm on exit if there are active terminal sessions.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.confirmOnExit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether the terminal cursor blinks.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.cursorBlinking"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the style of terminal cursor.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.cursorStyle"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"block"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.cwd"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether to enable bold text within the terminal, note that this requires support from the terminal shell.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.enableBold"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.env.linux"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object with environment variables that will be added to the VS Code process to be used by the terminal on OS X")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.env.osx"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.env.windows"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font family of the terminal, this defaults to editor.fontFamily's value.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.fontFamily"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the font size in pixels of the terminal.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.fontSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.lineHeight"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When set, this will prevent the context menu from appearing when right clicking within the terminal, instead it will copy when there is a selection and paste when there is no selection.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.rightClickCopyPaste"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the maximum amount of lines the terminal keeps in its buffer.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.scrollback"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether locale variables are set at startup of the terminal, this defaults to true on OS X, false on other platforms.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.setLocaleVariables"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The path of the shell that the terminal uses on Linux.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.shell.linux"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The path of the shell that the terminal uses on OS X.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.shell.osx"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The path of the shell that the terminal uses on Windows. When using shells shipped with Windows (cmd, PowerShell or Bash on Ubuntu).")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.shell.windows"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The command line arguments to use when on the Linux terminal.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.shellArgs.linux"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The command line arguments to use when on the OS X terminal.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.shellArgs.osx"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-l"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The command line arguments to use when on the Windows terminal.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"terminal.integrated.shellArgs.windows"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Problems")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if Problems view should automatically reveal files when opening them")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"problems.autoReveal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Show Errors & Warnings on files and folder.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"problems.decorations.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Telemetry")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable crash reports to be sent to Microsoft.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This option requires restart to take effect.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"telemetry.enableCrashReporter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable usage data and errors to be sent to Microsoft.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"telemetry.enableTelemetry"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Default Configuration Overrides")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure editor settings to be overridden for [git-commit] language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[git-commit]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.rulers"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("72")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure editor settings to be overridden for [go] language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[go]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.insertSpaces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure editor settings to be overridden for [json] language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[json]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.quickSuggestions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"strings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure editor settings to be overridden for [makefile] language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[makefile]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.insertSpaces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure editor settings to be overridden for [markdown] language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[markdown]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordWrap"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.quickSuggestions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Configure editor settings to be overridden for [yaml] language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[yaml]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.insertSpaces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.tabSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Npm")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether auto detection of npm scripts is on or off. Default is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"npm.autoDetect"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The package manager used to run scripts.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"npm.packageManager"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Run npm commands with the `--silent` option.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"npm.runSilent"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Merge Conflict")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable merge conflict block CodeLens within editor")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"merge-conflict.codeLens.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable/disable merge conflict decorators within editor")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"merge-conflict.decorators.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Emmet")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// An array of languages where Emmet abbreviations should not be expanded.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.excludeLanguages"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"markdown"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Path to a folder containing Emmet profiles and snippets.'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.extensionsPath"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//  Eg: {"vue-html": "html", "javascript": "javascriptreact"}')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.includeLanguages"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Preferences used to modify behavior of some actions and resolvers of Emmet.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.preferences"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to "never".')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.showAbbreviationSuggestions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Shows expanded Emmet abbreviations as suggestions.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// The option "inMarkupAndStylesheetFilesOnly" applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// The option "always" applies to all parts of the file regardless of markup/css.')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.showExpandedAbbreviation"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If true, then Emmet suggestions will show up as snippets allowing you to order them as per editor.snippetSuggestions setting.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.showSuggestionsAsSnippets"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Define profile for specified syntax or use your own profile with specific rules.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.syntaxProfiles"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When enabled, Emmet abbreviations are expanded when pressing TAB.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.triggerExpansionOnTab"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Variables to be used in Emmet snippets")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"emmet.variables"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Git")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether auto fetching is enabled")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.autofetch"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether auto refreshing is enabled")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.autorefresh"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls what type of branches are listed when running `Checkout to...`. `all` shows all refs, `local` shows only the local branchs, `tags` shows only tags and `remote` shows only remote branches.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.checkoutType"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"all"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Confirm before synchronizing git repositories")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.confirmSync"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls the git badge counter. `all` counts all changes. `tracked` counts only the tracked changes. `off` turns it off.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.countBadge"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"all"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls if Git contributes colors and badges to the explorer and the open editors view.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.decorations.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The default location where to clone a git repository")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.defaultCloneDirectory"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enables commit signing with GPG.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.enableCommitSigning"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Whether git is enabled")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.enabled"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Commit all changes when there are no staged changes.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.enableSmartCommit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ignores the legacy Git warning")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.ignoreLegacyWarning"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ignores the warning when there are too many changes in a repository")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.ignoreLimitWarning"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ignores the warning when Git is missing")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.ignoreMissingGitWarning"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Path to the git executable")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"git.path"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Jake")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether auto detection of Jake tasks is on or off. Default is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"jake.autoDetect"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Grunt")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether auto detection of Grunt tasks is on or off. Default is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"grunt.autoDetect"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Gulp")]),t._v("\n\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Controls whether auto detection of Gulp tasks is on or off. Default is on.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"gulp.autoDetect"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"on"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"common-questions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#common-questions","aria-hidden":"true"}},[t._v("#")]),t._v(" Common Questions")]),t._v(" "),e("p",[e("strong",[t._v('Q: VS Code says "Unable to write settings."')])]),t._v(" "),e("p",[e("strong",[t._v("A:")]),t._v(' If you try to change a setting (for example turning on Auto Save or selecting a new Color Theme) and you see "Unable to write settings. Please open User Settings to correct errors/warnings in the file and try again.", it means your '),e("code",[t._v("settings.json")]),t._v(" file is ill-formed or has errors. The errors can be as simple as a missing comma or setting value. Open the Settings editor "),e("strong",[t._v("File")]),t._v(" > "),e("strong",[t._v("Preferences")]),t._v(" > "),e("strong",[t._v("Settings")]),t._v(" ("),e("strong",[t._v("Code")]),t._v(" > "),e("strong",[t._v("Preferences")]),t._v(" > "),e("strong",[t._v("Settings")]),t._v(" on Mac) ("),e("code",[t._v("kb(workbench.action.openGlobalSettings)")]),t._v(") and you should see the error highlighted with red squiggles.")]),t._v(" "),e("p",[e("strong",[t._v("Q: When does it make sense to use workspace settings?")])]),t._v(" "),e("p",[e("strong",[t._v("A:")]),t._v(" If you're using a workspace that needs custom settings but you don't want to apply them to your other VS Code projects. A good example is language-specific linting rules.")])])},[],!1,null,null,null);s.default=a.exports}}]);