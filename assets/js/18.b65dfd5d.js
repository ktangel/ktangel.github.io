(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{231:function(t,n,e){"use strict";e.r(n);var o=e(0),r=Object(o.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/python-tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文链接"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("[TOC]")]),t._v(" "),e("p",[t._v("在这个教程里，你使用 Python 3 在 Visual Studio Code 中创建一个简单的 “Hello World” Python 应用。通过使用 Python 扩展，你可以将 VS Code 变成一个不错的轻量级 Python IDE（你可能会发现这是 PyCharm 之外的一个高效替代选择）。")]),t._v(" "),e("p",[t._v("这个教程目的在于为你介绍将 VS Code 作为 Python 环境，主要是怎么编辑、运行以及调试代码。这个教程不会教你 Python 本身的知识。只要你熟悉了 VS Code 的基础知识，你就能够在 VS Code 提供的语言介绍环境中学习列在 "),e("a",{attrs:{href:"https://www.python.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("python.org"),e("OutboundLink")],1),t._v(" 上的任何 "),e("a",{attrs:{href:"https://wiki.python.org/moin/BeginnersGuide/Programmers",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程教程"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("如果你有任何疑问，尽管在 "),e("a",{attrs:{href:"https://github.com/Microsoft/vscode-docs/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("VS Code documentation respository"),e("OutboundLink")],1),t._v(" 提问。")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("注意：")]),t._v(" 你可以在 VS Code 中使用 Python 2 学习这个教程，但是你需要对代码做一些调整，这个教程中没有涵盖这些内容。")])]),t._v(" "),e("h3",{attrs:{id:"前置条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前置条件","aria-hidden":"true"}},[t._v("#")]),t._v(" 前置条件")]),t._v(" "),e("p",[t._v("为了顺利地学习这个教程，需要先满足以下条件：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("安装 "),e("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=ms-python.python",target:"_blank",rel:"noopener noreferrer"}},[t._v("VS Code 的 Python 扩展"),e("OutboundLink")],1),t._v("。对于安装扩展的细节请查看 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/editor/extension-gallery",target:"_blank",rel:"noopener noreferrer"}},[t._v("扩展市场"),e("OutboundLink")],1),t._v("。所需 Python 扩展名字就叫 "),e("strong",[t._v("Python")]),t._v("，由微软发布。")])]),t._v(" "),e("li",[e("p",[t._v("安装一个 Python 3 版本（这个教程即为 Python 3 所写）。可选项如下：")]),t._v(" "),e("ul",[e("li",[t._v("（所有系统适用）从 "),e("a",{attrs:{href:"https://www.python.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("python.org"),e("OutboundLink")],1),t._v(" 下载；你可以索性就点击出现在页面前边的 "),e("strong",[t._v("Download Python 3.7.1")]),t._v(" 按钮（或者当前最新版本就行）。")]),t._v(" "),e("li",[t._v("（Linux）系统自带安装的 Python 3 就可以，但是如果你想安装其他 Python 程序，那么你必须先通过 "),e("a",{attrs:{href:"https://pip.pypa.io/en/stable/installing/#installing-with-get-pip-py",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("get-pip.py")]),e("OutboundLink")],1),t._v(" 安装 "),e("code",[t._v("pip")]),t._v("。")]),t._v(" "),e("li",[t._v("（macOS）在 macOS 系统上通过 "),e("a",{attrs:{href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Homebrew"),e("OutboundLink")],1),t._v(" 使用 "),e("code",[t._v("brew install python3")]),t._v(" 命令安装（macOS上系统预装的 Python（Python 2.7）是不支持的）。")]),t._v(" "),e("li",[t._v("（所有系统适用）从 "),e("a",{attrs:{href:"https://www.anaconda.com/download/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Anaconda"),e("OutboundLink")],1),t._v(" 下载（用于数据科学）。")])])]),t._v(" "),e("li",[e("p",[t._v("在 Windows 系统上，确保你的 Python 解释器位置（也就是安装在什么路径，比如 "),e("code",[t._v("c:\\python32")]),t._v("）包含在 PATH 环境变量中。你可以通过在命令行运行 "),e("code",[t._v("path")]),t._v(" 指令检查安装位置。如果没有包含 Python 解释器所在目录，打开 Windows 设置，检索“environment”，选择"),e("strong",[t._v("为你的账户编辑环境变量")]),t._v("，然后编辑"),e("strong",[t._v("Path")]),t._v("变量使包含Python所在目录。")])]),t._v(" "),e("li",[e("p",[t._v("在 MacOS 系统上，确保 PATH 环境变量中包含了 VS Code 安装所在目录。查看 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置说明"),e("OutboundLink")],1),t._v(" 获取更多信息。")])])]),t._v(" "),e("h3",{attrs:{id:"在一个项目（工作台）目录中启动-vs-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在一个项目（工作台）目录中启动-vs-code","aria-hidden":"true"}},[t._v("#")]),t._v(" 在一个项目（工作台）目录中启动 VS Code")]),t._v(" "),e("p",[t._v("在命令行或者终端中输入以下命令，创建一个名为“hello”的空目录，进入此目录，并在该目录（ "),e("code",[t._v(".")]),t._v("）中打开 VS Code（ "),e("code",[t._v("code")]),t._v("）：")]),t._v(" "),e("blockquote",[e("p",[t._v("mkdir hello\ncd hellow\ncode .")])]),t._v(" "),e("p",[t._v("在一个目录中启动 VS Code，这个目录就会变成你的“工作台”。VS Code 将针对这个工作台的设置存储在 "),e("code",[t._v(".vscode/settings.json")]),t._v("，与全局存储的用户设置是隔离开的。\n同样，你可以通过操作系统UI启动 VS Code，然后使用 "),e("strong",[t._v("文件 > 打开目录")]),t._v(" 来打开项目目录。")]),t._v(" "),e("h3",{attrs:{id:"选择一个-python-解释器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择一个-python-解释器","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择一个 Python 解释器")]),t._v(" "),e("p",[t._v("Python 是一种解释型语言，为了运行 Python 代码及获得智能提示，你必须告诉 VS Code 使用哪个解释器。\n在 VS Code 内，通过打开 "),e("strong",[t._v("命令面板")]),t._v("（⇧⌘P），输入 "),e("strong",[t._v("Python: 选择解释器")]),t._v(" 来检索，然后选择对应命令。如果可用的话，你也可以使用状态栏上的 "),e("strong",[t._v("选择Python环境")]),t._v(" 选项，（也可能状态栏已经显示了一个已选的解释器）：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/select-python-environment.png",alt:"select-python-environment"}})]),t._v(" "),e("p",[t._v("命令板会自动展示 VS Code 能够找到的可用解释器列表，包括虚拟环境。如果你没有找到期望的解释器，参考一下 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/environments",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置 Python 环境"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("选择一个解释器会将你的工作台中的 "),e("code",[t._v("python.pythonPath")]),t._v("值设置为该解释器路径。想要查看设置，选择 "),e("strong",[t._v("文件 > 首选项 > 设置")]),t._v("(在 macOS 系统上为"),e("strong",[t._v("Code > 首选项 > 设置")]),t._v(")，然后选择 "),e("strong",[t._v("工作台")]),t._v(" 页签。")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("注意：")]),t._v(" 如果你在没有打开任何工作台的情况下选择了一个解释器，VS Code 会转而设置你的用户设置中的 "),e("code",[t._v("python.pthonPath")]),t._v("值，这样会全局设置 VS Code 默认解释器。这里的用户设置可以确保你总是有一个默认的 Python 项目解释器。工作台设置可以让你覆盖用户设置。")])]),t._v(" "),e("h3",{attrs:{id:"创建一个-python-hello-world-源代码文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建一个-python-hello-world-源代码文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建一个 Python Hello World 源代码文件")]),t._v(" "),e("p",[t._v("在文件浏览工具栏中，点击 "),e("code",[t._v("hello")]),t._v("目录上的 新建文件按钮：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/new-file.png",alt:"new-file"}})]),t._v(" "),e("p",[t._v("命名为 "),e("code",[t._v("hello.py")]),t._v("，这个文件会在编辑器中自动打开：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/create-hellopy.png",alt:"create-hellopy"}})]),t._v(" "),e("p",[t._v("通过使用 "),e("code",[t._v(".py")]),t._v("文件后缀，你告知 VS Code 将这个文件解释为一个 Python 程序，以便 VS Code 使用 Python 扩展及所选择的解释器分析所含内容。")]),t._v(" "),e("p",[t._v("接下来，开始输入以下源代码（如果使用 Python 3）：")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("msg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("当你开始输入 "),e("code",[t._v("print")]),t._v("，注意 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/editor/intellisense",target:"_blank",rel:"noopener noreferrer"}},[t._v("智能提示"),e("OutboundLink")],1),t._v(" 是如何提示自动补全选项的。")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/intellisense-print.png",alt:"intellisense-print"}})]),t._v(" "),e("p",[t._v("智能提示和自动补全适用于标准 Python 模块以及安装到所选 Python 解释器环境里的其他软件包。同样的，它会为对象类型提供可用的方法补全。举个例子，因为 "),e("code",[t._v("msg")]),t._v("变量包含一个字符串，当你输入 "),e("code",[t._v("msg.")]),t._v(" 的时候智能提示会提供字符串方法：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/intellisense-msg.png",alt:"intellisense-msg"}})]),t._v(" "),e("p",[t._v("尽情地体验一下智能提示，然后撤销修改使只保留 "),e("code",[t._v("msg")]),t._v("变量及调用 "),e("code",[t._v("print")]),t._v("方法，再保存这个文件（⌘S）。")]),t._v(" "),e("p",[t._v("想要完整的了解关于编辑、格式化、以及重构，请查看 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/editing",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码编辑"),e("OutboundLink")],1),t._v(" 章节。Python 扩展同样全面支持 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/linting",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码分析 Linting"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"运行-hello-world"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行-hello-world","aria-hidden":"true"}},[t._v("#")]),t._v(" 运行 Hello World")]),t._v(" "),e("p",[t._v("使用 Python 运行 "),e("code",[t._v("hello.py")]),t._v("很简单。在编辑器中单击右键然后选择 "),e("strong",[t._v("在终端中运行Python文件")]),t._v("（也会自动保存文件）：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/run-python-in-terminal.png",alt:"run-python-in-terminal"}})]),t._v(" "),e("p",[t._v("这个操作会打开终端面板并自动激活你的 Python 解释器，然后运行 "),e("code",[t._v("python3 hello.py")]),t._v("(macOS/Linux) 或者 "),e("code",[t._v("python hello.py")]),t._v("(Windows)：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/terminal.png",alt:"terminal"}})]),t._v(" "),e("p",[t._v("你还可以使用另外两种方式在 VS Code 中运行 Python：")]),t._v(" "),e("ul",[e("li",[t._v("选中一行或多行，然后按 "),e("code",[t._v("Shift+Enter")]),t._v(" 组合键或者点击右键并选择 "),e("strong",[t._v("在Python终端中运行选中内容/行")]),t._v("。这个命令对于测试文件的一部分很方便。")]),t._v(" "),e("li",[t._v("使用 "),e("strong",[t._v("Python: Start REPL")]),t._v("（REPL 即：Read, Eval, Print, Loop, 参考"),e("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/visualstudio/python/python-interactive-repl-in-visual-studio?view=vs-2019",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 交互窗口"),e("OutboundLink")],1),t._v("） 命令为当前选中的 Python 解释器打开一个 REPL 终端，然后你就可以一次输入并运行几行代码。")])]),t._v(" "),e("h3",{attrs:{id:"配置及运行调试器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置及运行调试器","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置及运行调试器")]),t._v(" "),e("p",[t._v("让我们现在尝试一下调试简单的 Hello World 程序。\n首先，通过将光标放在 "),e("code",[t._v("print")]),t._v("调用处并按下 F9 在 "),e("code",[t._v("hello.py")]),t._v("中第2行设置一个断点。或者就点击一下编辑器中的左边槽，在行号旁边。当你设置了断点后，边槽中会出现一个红色圆圈。")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/breakpoint.png",alt:"breakpoint"}})]),t._v(" "),e("p",[t._v("接下来，选择边栏上的调试视图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/debug.png",alt:"debug"}})]),t._v(" "),e("p",[t._v("然后选择调试工具栏上的配置图标（或者使用 "),e("strong",[t._v("调试 > 打开配置 菜单命名")]),t._v("）：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/debug-open-configurations.png",alt:"debug-open-configurations"}})]),t._v(" "),e("p",[t._v("稍等一会儿，这个命令会创建一个 "),e("code",[t._v("launch.json")]),t._v("文件，包含一系列配置项并出现在下拉选项中：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/debug-configuration.png",alt:"debug-configuration"}})]),t._v(" "),e("p",[e("strong",[t._v("注意：")]),t._v(" VS Code 对于各种配置项都使用 JSON 文件；"),e("code",[t._v("launch.json")]),t._v(" 就是一个包含调试配置项文件的标准名称。")]),t._v(" "),e("p",[t._v("这些不同的配置项都在 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/debugging",target:"_blank",rel:"noopener noreferrer"}},[t._v("调试配置项"),e("OutboundLink")],1),t._v(" 中有完整的解释；当前而言，只用选中 "),e("strong",[t._v("Python：当前文件（集成终端）")]),t._v("，这个配置项会使用当前选择的 Python 解释器运行编辑器当前显示的文件。")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("警告")]),t._v("：由于"),e("a",{attrs:{href:"https://github.com/Microsoft/vscode-python/issues/4223",target:"_blank",rel:"noopener noreferrer"}},[t._v("目前调试器中的一个bug"),e("OutboundLink")],1),t._v("，接下来关于 "),e("code",[t._v("stopOnEntry")]),t._v(" 设置的论述不起作用并会引发调试器启动失败。替代方案是在第一行设置一个断点并且"),e("strong",[t._v("不要")]),t._v("将 "),e("code",[t._v("stopOnEntry")]),t._v(" 添加到配置中。\n影响段落：\n当程序启动时为了在第一行自动中断调试器，在 "),e("code",[t._v("launch.json")]),t._v(' 中 "Python: 当前文件"配置下添加一个 '),e("code",[t._v('"stopOnEnty": true')]),t._v(" 设置，整个配置大致如下：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Python: Current File (Integrated Terminal)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"request"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"launch"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"program"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${file}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"console"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integratedTerminal"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stopOnEntry"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("p",[t._v("改完后保存 "),e("code",[t._v("launch.json")]),t._v("。")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("提示：")]),t._v(" 如果你需要指定包含调试所用解释器的确切目录，就在配置中囊括一个 "),e("code",[t._v("pythonPath")]),t._v(" 入口，例如 "),e("code",[t._v('"pythonPath": "${workspaceFolder}"')]),t._v(" 或 "),e("code",[t._v('"pythonPath": "${workspaceFolder}/.venv"')]),t._v("。")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("提示：")]),t._v(" 想为 Python 程序指定命令行参数，在配置中添加一行 "),e("code",[t._v('"args": []')]),t._v("，然后把各个参数作为元素放在 "),e("code",[t._v("[]")]),t._v("列表中，参考 [调试 - 参数]（（/docs/python/debugging#_args）。")])]),t._v(" "),e("p",[t._v("切换到编辑器中的 "),e("code",[t._v("hello.py")]),t._v("，然后通过选择调试工具栏上的箭头或者按下 F5 来运行调试器。调试器在文件第一行上的断点暂停（如果 "),e("code",[t._v("stopOnEntry")]),t._v("设置为 ture 的话则会直接停在第一行）。当前所在行在左侧会有一个黄色箭头标识出来。如果你停在第一行并在这个时候检查 "),e("strong",[t._v("Local")]),t._v(" 变量面板，你会看到只有自动化的双下划线变量被定义了：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/locals.png",alt:"locals"}})]),t._v(" "),e("p",[t._v("一个调试工具栏会出现在顶部，从左至右依次是以下命令：继续/continue（F5），单步跳过/step over（F10），单步调试/step into（F11），单步跳出/step out（⇧F11），重启/restart（⇧⌘F5），以及 停止/stop（⇧F5）。")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/debug-toolbar.png",alt:"debug-toolbar"}})]),t._v(" "),e("p",[t._v("状态栏也会改变颜色（大多数主题中会是橙色）以标识出你正处于调试模式。"),e("strong",[t._v("Python 调试控制台")]),t._v("也同样会自动出现在右侧面板下部，用以展示正在执行的命令及程序输出。")]),t._v(" "),e("p",[t._v("想要继续运行程序，选择调试工具栏上的继续命令（F5）。调试器会运行程序直到下一个断点。刚刚定义的 "),e("code",[t._v("msg")]),t._v("变量会出现在 "),e("strong",[t._v("Local")]),t._v("面板中：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/locals-msg.png",alt:"locals-msg"}})]),t._v(" "),e("p",[t._v("你可以在"),e("strong",[t._v("调试控制台")]),t._v("中使用变量（如果你没有看到，就在 VS Code 右下方区域中选择"),e("strong",[t._v("调试控制台")]),t._v("，或者..从菜单中选择。）然后试着在 控制台底部的 > 提示处一行一行的输入以下代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("msg\nmsg.capitalize()\nmsg.split()\n")])])]),e("p",[e("img",{attrs:{src:"images/python-tutorial/debug-console.png",alt:"debug-console"}}),t._v("\n再次选择工具栏上的蓝色继续按钮（或者按下 F5 ）运行程序至结束。\n如果你切换回 "),e("strong",[t._v("Python调试控制台")]),t._v("，“Hello World” 会出现在里面，一旦程序执行完成，VS Code 就会退出调试模式。")]),t._v(" "),e("p",[t._v("如果你重启调试器，调试器将再次停在第一个断点（如果 "),e("code",[t._v("stopOnEntry")]),t._v("设置为 true，则会停在第一行，在这种情况下调试器停在任何代码运行之前）。")]),t._v(" "),e("p",[t._v("想要在程序执行完成前停止，可以使用调试工具栏上的红色方形停止按钮（⇧F5），或者使用 "),e("strong",[t._v("调试 > 停止调试")]),t._v(" 菜单命令。\n查看"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/debugging",target:"_blank",rel:"noopener noreferrer"}},[t._v("调试配置项"),e("OutboundLink")],1),t._v("以了解完整详情信息，其中包含了关于使用指定 Python解释器 来调试的说明。")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("提示：使用日志点替代 print 表达式：")]),t._v(" 开发者经常使用 "),e("code",[t._v("print")]),t._v("表达式快速检查变量，而不必在调试器中逐行检查代码。在 VS Code 中，你可以转而使用 "),e("strong",[t._v("日志点")]),t._v("。一个日志点就像一个断点，它打印信息到控制台中而不暂停程序。了解更多信息，查看 VS Code 调试文章中的"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/editor/debugging#_logpoints",target:"_blank",rel:"noopener noreferrer"}},[t._v("日志点"),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("h3",{attrs:{id:"troubleshooting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting","aria-hidden":"true"}},[t._v("#")]),t._v(" Troubleshooting")]),t._v(" "),e("p",[t._v("如果出于某些原因 VS Code 没有为你生成 "),e("code",[t._v("launch.json")]),t._v("，你可以在项目目录中创建 "),e("code",[t._v(".vscode/launch.json")]),t._v("文件（如果需要的话，创建 "),e("code",[t._v(".vscode")]),t._v("目录），然后将以下内容粘贴到 "),e("code",[t._v("launch.json")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.2.0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"configurations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Python: Current File (Integrated Terminal)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"request"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"launch"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"program"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${file}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"console"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integratedTerminal"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v('如果你看到如下"SyntaxError: invalid syntax"（语法错误：无效语法），可能是你尝试过当 '),e("code",[t._v("launch.json")]),t._v("展示在编辑器中时启动调试。这个错误之所以出现是因为 "),e("code",[t._v("launch.json")]),t._v("并不是像 "),e("code",[t._v("hello.py")]),t._v("一样的 Python 代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    // Use IntelliSense to learn about possible attributes.\n     ^\nSyntaxError: invalid syntax\n")])])]),e("p",[t._v("选中 "),e("code",[t._v("hello.py")]),t._v("后再试一下即可。也可以通过在 "),e("code",[t._v("launch.json")]),t._v("中的配置列表中添加以下几行来为 "),e("code",[t._v("hello.py")]),t._v("文件专门创建一个调试配置。然后在调试器下拉选项中选择这个配置并重新开始调试。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Python: hello.py"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"request"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"launch"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"program"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${workspaceFolder}/hello.py"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"console"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integratedTerminal"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("p",[t._v("如果你看到这个消息 - “未找到Python解释器，由于 python.exe 不在工作区目录下，” 或者 “你需要在开始调试前安装一个 Python 解释器，” 那么可能是你的 "),e("code",[t._v("launch.json")]),t._v("文件中有 "),e("code",[t._v("pythonPython: ${workspaceFolder}")]),t._v("但实际上你的 Python 解释器在另一个路径下。检查一下值，或者完全移除 "),e("code",[t._v("pythonPath")]),t._v("属性。")]),t._v(" "),e("h3",{attrs:{id:"安装及使用软件包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装及使用软件包","aria-hidden":"true"}},[t._v("#")]),t._v(" 安装及使用软件包")]),t._v(" "),e("p",[t._v("现在我们来运行一个有点意思的例子。在 Python 中，软件包是你获得任意有用代码库的方式，通常是从 "),e("a",{attrs:{href:"https://pypi.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PyPI"),e("OutboundLink")],1),t._v(" 获取。举个例子，你使用 "),e("code",[t._v("matplotlib")]),t._v("及 "),e("code",[t._v("numpy")]),t._v("软件包来创建图形绘制，通用用于数据科学。（注意，由于缺乏必须的UI支持，当运行在 "),e("a",{attrs:{href:"https://docs.microsoft.com/windows/wsl/about",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows Subsystem for Linux"),e("OutboundLink")],1),t._v(" 中时 "),e("code",[t._v("maptplotlib")]),t._v("不能展示图形。）")]),t._v(" "),e("p",[t._v("回到"),e("strong",[t._v("浏览")]),t._v("视图（左侧最顶部的图标，用于展示文件），创建一个名为 "),e("code",[t._v("standardplot.py")]),t._v("的新文件，粘贴以下源代码：")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" matplotlib"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" plt\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n\nx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("linspace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create a list of evenly-spaced numbers over the range")]),t._v("\nplt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" np"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Plot the sine of each x point")]),t._v("\nplt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("show"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Display the plot")]),t._v("\n")])])]),e("blockquote",[e("p",[e("strong",[t._v("提示：")]),t._v(" 如果你手动输入上面的代码，可能会发现当你在行末按下回车时自动补全功能会改变 "),e("code",[t._v("as")]),t._v("关键字后的名字。如果想避免这种情况，输入一个空格后再按回车。")])]),t._v(" "),e("p",[t._v('接下来，试着使用上一节描述的 "Python: Current file" 配置项在调试器中运行这个文件。（如果你还将 '),e("code",[t._v('"stopOnEntry": ture')]),t._v("保留在那个配置中，需要再一次选择运行命令以继续。）")]),t._v(" "),e("p",[t._v("除非你正在使用 "),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Anaconda_(Python%E5%8F%91%E8%A1%8C%E7%89%88)",target:"_blank",rel:"noopener noreferrer"}},[t._v("Anaconda"),e("OutboundLink")],1),t._v(" 发行版或者之前已经安装过 "),e("code",[t._v("matplotlib")]),t._v("软件包，你应该会看到这条消息：“ModuleNotFoundError: No module named 'matplotlib'”。这样一条信息说明所需的软件包在你的系统上不可用。")]),t._v(" "),e("p",[t._v("为了安装 "),e("code",[t._v("matplotlib")]),t._v("软件包（也会安装 "),e("code",[t._v("numpy")]),t._v("作为依赖），停止调试器并使用命令面板运行 "),e("strong",[t._v("终端：新建集成终端(⌃⇧`)")]),t._v("。这个命令会打开所选解释器的命令提示符。然后根据你的操作系统输入以下命名：")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("注意：")]),t._v(" 如果 Python 解释器安装在文件系统受保护区域中，则以下命令可能需要请求授权；如果你没有所使用电脑的管理员权限，可能不允许安装软件包。在这种情况下，你需要转而使用"),e("em",[t._v("虚拟环境")]),t._v("（查看"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/environments#_global-virtual-and-conda-environments",target:"_blank",rel:"noopener noreferrer"}},[t._v("Environments"),e("OutboundLink")],1),t._v("）。如果你不能安装软件包或者遇到其他问题，"),e("a",{attrs:{href:"https://github.com/Microsoft/vscode-docs/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("请在GitHub上开一个issue"),e("OutboundLink")],1),t._v(" 以便我们协助你调查。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 不要使用 Anaconda 发型版本，因为他们已经包含了 matplotlib 库。\n\n# macOS\nsudo python3 -m pip install matplotlib\n\n# Windows (may require elevation)\npython -m pip install matplotlib\n\n# Linux (Debian)\nsudo apt-get install python3-tk\npython3 -m pip install matplotlib\n")])])]),e("p",[t._v("现在返回程序中（开启或不开启调试器都行）稍等片刻，一个带有输出的绘图窗口将会出现：")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/python-tutorial/plot.png",alt:"plot"}})]),t._v(" "),e("h3",{attrs:{id:"使用虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用虚拟环境","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用虚拟环境")]),t._v(" "),e("p",[t._v("Python 开发者最佳实践是避免将软件包安装到全局解释器环境中，就像我们上一节所做的。你应该使用一个包含全局解释器副本的特定项目的虚拟环境。激活该环境后，你之后安装的任何软件包都与其他环境隔离。这种隔离可以减少很多由软件包版本冲突带来的问题。")]),t._v(" "),e("p",[t._v("对于创建及激活虚拟环境、安装软件包的示例，请查看 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/tutorial-django",target:"_blank",rel:"noopener noreferrer"}},[t._v("Django 教程"),e("OutboundLink")],1),t._v(" 和"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/tutorial-flask",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flask 教程"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"下一步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下一步","aria-hidden":"true"}},[t._v("#")]),t._v(" 下一步")]),t._v(" "),e("p",[t._v("你可以配置 VS Code 以使用已安装的任意 Python 环境，包括虚拟环境和 "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Conda_(package_manager)",target:"_blank",rel:"noopener noreferrer"}},[t._v("conda"),e("OutboundLink")],1),t._v(" 环境。你同样可以使用一个单独的环境来调试。更多详情请查看 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/environments",target:"_blank",rel:"noopener noreferrer"}},[t._v("Environments"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("要学习更多 Python 语言知识，请在 VS Code 环境下参考列在 "),e("a",{attrs:{href:"http://python.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("python.org"),e("OutboundLink")],1),t._v(" 上的任意 "),e("a",{attrs:{href:"https://wiki.python.org/moin/BeginnersGuide/Programmers",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程教程"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("要学习使用 Django 和 Flask 框架构建 web 应用，请参考以下教程：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/tutorial-django",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 Visual Studio Code 中使用 Django"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/tutorial-flask",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 Visual Studio Code 中使用 Flask"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("这里还有更多在 Visual Studio Code 中探索使用 Python 的内容：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/editing",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码编辑"),e("OutboundLink")],1),t._v(" - 学习自动补全，智能提示，格式化，以及重构。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/linting",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码分析"),e("OutboundLink")],1),t._v(" - 启用，配置和应用一系列 Python 代码分析。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/debugging",target:"_blank",rel:"noopener noreferrer"}},[t._v("调试"),e("OutboundLink")],1),t._v(" - 学习本地和远程调试 Python。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/unit-testing",target:"_blank",rel:"noopener noreferrer"}},[t._v("单元测试"),e("OutboundLink")],1),t._v(" - 配置单元测试环境并发现、运行和调试测试。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/settings-reference",target:"_blank",rel:"noopener noreferrer"}},[t._v("设置参考"),e("OutboundLink")],1),t._v(" - 探索 VS Code 中所有 Python 相关设置。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/tutorial-deploy-containers",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用容器将 Python 部署到 Azure App Service"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/python/tutorial-deploy-app-service-on-linux",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 Linux 上将 Python 部署到 Azure App Service（预览版）"),e("OutboundLink")],1)])])])},[],!1,null,null,null);n.default=r.exports}}]);