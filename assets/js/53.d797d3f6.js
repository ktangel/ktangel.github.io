(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{211:function(t,e,n){"use strict";n.r(e);var a=n(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"activation-events-package-json"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#activation-events-package-json","aria-hidden":"true"}},[t._v("#")]),t._v(" Activation Events - package.json")]),t._v(" "),n("p",[t._v("Extensions are activated lazily in VS Code.  As a result you need to provide VS Code with context as to when your extension should be activated.  We support the following activation events:")]),t._v(" "),n("ul",[n("li",[n("router-link",{attrs:{to:"/docs/extensionAPI/activation-events.html#activationeventsonlanguage"}},[n("code",[t._v("onLanguage:${language}")])])],1),t._v(" "),n("li",[n("router-link",{attrs:{to:"/docs/extensionAPI/activation-events.html#activationeventsoncommand"}},[n("code",[t._v("onCommand:${command}")])])],1),t._v(" "),n("li",[n("router-link",{attrs:{to:"/docs/extensionAPI/activation-events.html#activationeventsworkspacecontains"}},[n("code",[t._v("workspaceContains:${toplevelfilename}")])])],1),t._v(" "),n("li",[n("router-link",{attrs:{to:"/docs/extensionAPI/activation-events.html#activationevents"}},[n("code",[t._v("*")])])],1)]),t._v(" "),n("p",[t._v("We also provide an overview of the "),n("router-link",{attrs:{to:"/docs/extensionAPI/extension-manifest.html"}},[n("code",[t._v("package.json")]),t._v(" extension manifest")]),t._v(" and the minimum required fields.")],1),t._v(" "),n("h2",{attrs:{id:"activationevents-onlanguage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#activationevents-onlanguage","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("activationEvents.onLanguage")])]),t._v(" "),n("p",[t._v("This activation event is emitted and interested extensions will be activated whenever a file that resolves to a certain language gets opened.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("...\n"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"activationEvents"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onLanguage:python"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n...\n")])])]),n("h2",{attrs:{id:"activationevents-oncommand"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#activationevents-oncommand","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("activationEvents.onCommand")])]),t._v(" "),n("p",[t._v("This activation event is emitted and interested extensions will be activated whenever a command is being invoked:")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("...\n"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"activationEvents"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onCommand:extension.sayHello"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n...\n")])])]),n("h2",{attrs:{id:"activationevents-workspacecontains"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#activationevents-workspacecontains","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("activationEvents.workspaceContains")])]),t._v(" "),n("p",[t._v("This activation event is emitted and interested extensions will be activated whenever a folder is opened and the folder contains a top-level file.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("...\n"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"activationEvents"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workspaceContains:.editorconfig"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n...\n")])])]),n("h2",{attrs:{id:"activationevents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#activationevents","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("activationEvents.*")])]),t._v(" "),n("p",[t._v("This activation event is emitted and interested extensions will be activated whenever VS Code starts up. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("...\n"),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"activationEvents"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n...\n")])])]),n("blockquote",[n("p",[n("strong",[t._v("Note:")]),t._v(" An extension can listen to multiple activation events, and that is preferable to listening to "),n("code",[t._v('"*"')]),t._v(".")])]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("Note:")]),t._v(" An extension "),n("strong",[t._v("must")]),t._v(" export an "),n("code",[t._v("activate()")]),t._v(" function from its main module and it will be invoked "),n("strong",[t._v("only once")]),t._v(" by VS Code when any of the specified activation events is emitted. Also, an extension "),n("strong",[t._v("should")]),t._v(" export a "),n("code",[t._v("deactivate()")]),t._v(" function from its main module to perform cleanup tasks on VS Code shutdown.")])]),t._v(" "),n("h2",{attrs:{id:"next-steps"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#next-steps","aria-hidden":"true"}},[t._v("#")]),t._v(" Next Steps")]),t._v(" "),n("p",[t._v("To learn more about VS Code extensibility model, try these topic:")]),t._v(" "),n("ul",[n("li",[n("router-link",{attrs:{to:"/docs/extensionAPI/extension-manifest.html"}},[t._v("Extension Manifest File")]),t._v(" - VS Code package.json extension manifest file reference")],1),t._v(" "),n("li",[n("router-link",{attrs:{to:"/docs/extensionAPI/extension-points.html"}},[t._v("Contribution Points")]),t._v(" - VS Code contribution points reference")],1)]),t._v(" "),n("h2",{attrs:{id:"common-questions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#common-questions","aria-hidden":"true"}},[t._v("#")]),t._v(" Common Questions")]),t._v(" "),n("p",[t._v("Nothing yet")])])},[],!1,null,null,null);e.default=s.exports}}]);