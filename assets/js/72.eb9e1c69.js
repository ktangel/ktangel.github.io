(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{394:function(e,t,o){"use strict";o.r(t);var n=o(33),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"c-c-for-vs-code-预览-preview"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#c-c-for-vs-code-预览-preview"}},[e._v("#")]),e._v(" C/C++ for VS Code (预览)(Preview)")]),e._v(" "),o("p",[e._v("C/C++ support for Visual Studio Code is provided today as a preview of our work to enable cross-platform C and C++ development using VS Code on Windows, Linux, and OS X. Our focus in this preview release is code editing and navigation support for C and C++ code everywhere that VS Code runs, as well as debugging on Linux, OS X, and Windows.")]),e._v(" "),o("p",[e._v("今天作为我们工作的预览，C/C++ support for VS Code 被提供出来。它能够在Windows，Linux和OS X上跨平台开发C和C++。 我们这个预览版的重点是代码编辑和在任何运行VS Code中的C 和 C++ 的代码导航，以及在Linux，OS X和Windows下的调试")]),e._v(" "),o("p",[e._v("If you just want a lightweight tool to edit your C++ files, VS Code has you covered but if you want the best possible experience for your existing Visual C++ projects or debugging on Windows, we recommend you use a version of Visual Studio such as "),o("a",{attrs:{href:"https://www.visualstudio.com/products/visual-studio-community-vs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual Studio Community"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("如果你只是想一个轻量级的工具来编辑你的C++文件，无论你在哪里VSCode都已经被覆盖。但如果你想在Windows下调试您现有的Visual C ++项目，最佳的体验，我们推荐您使用[Visual Studio社区]版本的Visual Studio。")]),e._v(" "),o("p",[e._v("We're still shaping the C++ experience in VS Code so now is a great time to "),o("a",{attrs:{href:"mailto:c_cpp_support@microsoft.com"}},[e._v("provide bug reports, feature requests, and feedback")]),e._v(", and for those of you who use Linux or OS X as your development environment, to "),o("a",{attrs:{href:"http://landinghub.visualstudio.com/c-nonwin",target:"_blank",rel:"noopener noreferrer"}},[e._v("get engaged"),o("OutboundLink")],1),e._v(" with the Visual Studio team.")]),e._v(" "),o("p",[e._v("我们仍然在塑造在VS code中编写C++的体验，所以现在是个"),o("a",{attrs:{href:"mailto:c_cpp_support@microsoft.com"}},[e._v("提交bug报告，特性要求，以及反馈")]),e._v("的好机会。对于那些使用Linux或者OS X作为你的开发环境的开发者，请到"),o("a",{attrs:{href:"http://landinghub.visualstudio.com/c-nonwin",target:"_blank",rel:"noopener noreferrer"}},[e._v("get engaged"),o("OutboundLink")],1),e._v("为Visual Studio团队提供反馈。")]),e._v(" "),o("h2",{attrs:{id:"getting-started（开始）"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#getting-started（开始）"}},[e._v("#")]),e._v(" Getting Started（开始）")]),e._v(" "),o("p",[o("strong",[e._v("To install the Microsoft C/C++ extension:")])]),e._v(" "),o("p",[o("strong",[e._v("安装微软的C/C++拓展")])]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Open VS Code.")])]),e._v(" "),o("li",[o("p",[e._v("打开VS code。")])]),e._v(" "),o("li",[o("p",[e._v("Click the Extensions View icon on the Sidebar.")])]),e._v(" "),o("li",[o("p",[e._v("点击在侧边栏的查看拓展的图标")])]),e._v(" "),o("li",[o("p",[e._v("Search for "),o("code",[e._v("cpptools")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("查找"),o("code",[e._v("cpptools")])])]),e._v(" "),o("li",[o("p",[e._v("Click "),o("strong",[e._v("Install")]),e._v(", then click "),o("strong",[e._v("Enable")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("点击"),o("strong",[e._v("Install（安装）")]),e._v("，然后点击"),o("strong",[e._v("Enable（可用）")])])]),e._v(" "),o("li",[o("p",[e._v("Open a folder that contains your C/C++ code.")])]),e._v(" "),o("li",[o("p",[e._v("打开一个包含你的C/C++文件的文件夹")])])]),e._v(" "),o("p",[o("strong",[e._v("To enable code completion and navigation, you will need to generate a "),o("code",[e._v("c_cpp_properties.json")]),e._v(" file:")])]),e._v(" "),o("p",[o("strong",[e._v("为了启用代码补齐和导航，你需要生成一个"),o("code",[e._v("c_cpp_properties.json")]),e._v("文件：")])]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Hover over any green squiggle in a source file (e.g. a #include statement).")])]),e._v(" "),o("li",[o("p",[e._v("在源文件中，讲鼠标悬停在绿色的波浪上（比如一个#include语句）")])]),e._v(" "),o("li",[o("p",[e._v("Click the lightbulb that appears underneath the mouse cursor.")])]),e._v(" "),o("li",[o("p",[e._v("点击在鼠标之下出现的灯泡的图案")])]),e._v(" "),o("li",[o("p",[e._v("Click "),o("strong",[e._v("Add include path to settings")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("点击"),o("strong",[e._v("Add include path to settings")])])])]),e._v(" "),o("p",[e._v("This will generate a "),o("code",[e._v("c_cpp_properties.json")]),e._v(" file that allows you to add additional include paths to properly enable code navigation and auto-completion.")]),e._v(" "),o("p",[e._v("这样会生成一个允许你添加include paths以正确启用代码导航和自动补齐功能的"),o("code",[e._v("c_cpp_properties.json")]),e._v("文件")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("Note:")]),e._v(" You can also generate or edit a "),o("code",[e._v("c_cpp_properties.json")]),e._v(" file with the "),o("strong",[e._v("C/Cpp: Edit Configurations")]),e._v(" command from the "),o("strong",[e._v("Command Palette")]),e._v(" ("),o("code",[e._v("kb(workbench.action.showCommands)")]),e._v(").")])]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("备注："),o("strong",[e._v("你也可以从 "),o("strong",[e._v("命令面板")]),e._v(" ("),o("code",[e._v("kb(workbench.action.showCommands)")]),e._v(")中通过")]),e._v("C/Cpp: Edit Configurations")]),e._v("命令来生成或编辑"),o("code",[e._v("c_cpp_properties.json")]),e._v("文件")])]),e._v(" "),o("p",[o("strong",[e._v("If you want to build your application from VS Code, you will need to generate a "),o("code",[e._v("tasks.json")]),e._v(" file:")])]),e._v(" "),o("p",[o("strong",[e._v("如果你想从VS code中构建你的应用，你需要生成一个"),o("code",[e._v("tasks.json")]),e._v(" 文件：")])]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Open the "),o("strong",[e._v("Command Palette")]),e._v(" ("),o("code",[e._v("kb(workbench.action.showCommands)")]),e._v(").")])]),e._v(" "),o("li",[o("p",[e._v("打开"),o("strong",[e._v("命令面板")]),e._v("("),o("code",[e._v("kb(workbench.action.showCommands)")]),e._v(").")])]),e._v(" "),o("li",[o("p",[e._v("Select the "),o("strong",[e._v("Tasks: Configure Task Runner")]),e._v(" command and you will see a list of task runner templates.")])]),e._v(" "),o("li",[o("p",[e._v("选择"),o("strong",[e._v("Tasks: Configure Task Runner")]),e._v(" command，你将会看到一个进程执行器模板（task runner templates）列表")])]),e._v(" "),o("li",[o("p",[e._v("Select "),o("strong",[e._v("Others")]),e._v(" to create a task which runs an external command.")])]),e._v(" "),o("li",[o("p",[e._v("选择"),o("strong",[e._v("Others")]),e._v("创建一个执行外部命令的进程")])]),e._v(" "),o("li",[o("p",[e._v("Change the "),o("code",[e._v("command")]),e._v(" to the command line expression you use to build your application (e.g. "),o("code",[e._v("g++ -g main.cpp")]),e._v(").")])]),e._v(" "),o("li",[o("p",[e._v("修改"),o("code",[e._v("command")]),e._v("选项为在命令行环境下你创建编译应用的表达式（比如"),o("code",[e._v("g++ -g main.cpp")]),e._v("）")])]),e._v(" "),o("li",[o("p",[e._v("Add any required args (e.g. "),o("code",[e._v("-g")]),e._v(" to build for debugging).")])]),e._v(" "),o("li",[o("p",[e._v("添加任何必要的参数")])]),e._v(" "),o("li",[o("p",[e._v("You can now build your application with ("),o("code",[e._v("kb(workbench.action.tasks.build)")]),e._v(")")])]),e._v(" "),o("li",[o("p",[e._v("现在你可以通过("),o("code",[e._v("kb(workbench.action.tasks.build)")]),e._v(")构建你的应用了")])])]),e._v(" "),o("p",[e._v("You should now see a "),o("code",[e._v("tasks.json")]),e._v(" file in your workspace "),o("code",[e._v(".vscode")]),e._v(" folder that looks something like:")]),e._v(" "),o("p",[e._v("现在你应该可以在你的工作目录的"),o("code",[e._v(".vscode")]),e._v("文件夹下找到一个内容像下面展示那样的"),o("code",[e._v("tasks.json")]),e._v("文件：")]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"version"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0.1.0"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"command"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"g++"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"isShellCommand"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"showOutput"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"args"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-g"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"main.cpp"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),o("p",[e._v("For more information on tasks, see "),o("a",{attrs:{href:"/docs/editor/tasks"}},[e._v("Integrate with External Tools via Tasks")]),e._v(".")]),e._v(" "),o("p",[o("strong",[e._v("To enable debugging, you will need to generate a "),o("code",[e._v("launch.json")]),e._v(" file:")])]),e._v(" "),o("p",[o("strong",[e._v("为了能够调试，你需要生成一个"),o("code",[e._v("launch.json")]),e._v("文件：")])]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Navigate to the Debug view by clicking the Debug icon in the Sidebar.")])]),e._v(" "),o("li",[o("p",[e._v("通过点击在侧边栏的调试图标，可以导航到调试窗口")])]),e._v(" "),o("li",[o("p",[e._v("In the "),o("strong",[e._v("Debug")]),e._v(" view, click the "),o("strong",[e._v("Configure")]),e._v(" icon.")])]),e._v(" "),o("li",[o("p",[e._v("在"),o("strong",[e._v("调试窗口")]),e._v("，点击"),o("strong",[e._v("设置")]),e._v("图标")])]),e._v(" "),o("li",[o("p",[e._v("Select "),o("code",[e._v("C++ (GDB/LLDB)")]),e._v(" (to use GDB or LLDB) or "),o("code",[e._v("C++ (Windows)")]),e._v(" (to use the Visual Studio Windows Debugger) from the "),o("strong",[e._v("Select Environment")]),e._v(" dropdown. This creates a "),o("code",[e._v("launch.json")]),e._v(" file for editing with two configurations:")])]),e._v(" "),o("li",[o("p",[e._v("从选择环境的选项中选择"),o("code",[e._v("C++ (GDB/LLDB)")]),e._v("（使用GDB或LLDB）或"),o("code",[e._v("C++ (Windows)")]),e._v("（使用Visual Studio Windows Debugger），这会创建一个"),o("code",[e._v("launch.json")]),e._v(" 文件，用来编辑两个设置")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("C++ Launch")]),e._v(" defines the properties for launching your application when you start debugging.")]),e._v(" "),o("li",[o("strong",[e._v("C++ Launch")]),e._v(" 定义了当你开始调试时用来启动应用的属性")]),e._v(" "),o("li",[o("strong",[e._v("C++ Attach")]),e._v(" defines the properties for attaching to\na process that's already running.")]),e._v(" "),o("li",[o("strong",[e._v("C++ Attach")]),e._v("  定义了将应用附加到早已运行的线程时的属性")])])]),e._v(" "),o("li",[o("p",[e._v("Update the "),o("code",[e._v("program")]),e._v(" property with the path to the program you are debugging.")])]),e._v(" "),o("li",[o("p",[e._v("把"),o("code",[e._v("program")]),e._v(" 属性更新为你要调试的程序的路径")])]),e._v(" "),o("li",[o("p",[e._v("If you want your application to build when you start debugging, add a "),o("code",[e._v("preLaunchTask")]),e._v(" property with the name of the build task you created in "),o("code",[e._v("tasks.json")]),e._v(' ("g++" in the example above).')])]),e._v(" "),o("li",[o("p",[e._v("如果你想开始调试时构建应用的话，添加一个"),o("code",[e._v("preLaunchTask")]),e._v(" 属性，其值为你在"),o("code",[e._v("tasks.json")]),e._v("文件里创建的生成任务的名称。")])])]),e._v(" "),o("p",[e._v("To learn more, see "),o("a",{attrs:{href:"https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configuring launch.json for C/C++ debugging"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("If you are debugging with GDB on Windows, see "),o("a",{attrs:{href:"#debug_windows_gdb"}},[e._v("Windows Debugging on Cygwin/MinGW")]),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"editing-code"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#editing-code"}},[e._v("#")]),e._v(" Editing Code")]),e._v(" "),o("h3",{attrs:{id:"code-formatting"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#code-formatting"}},[e._v("#")]),e._v(" Code Formatting")]),e._v(" "),o("p",[e._v("The C/C++ extension for Visual Studio Code supports source code formatting using "),o("a",{attrs:{href:"http://clang.llvm.org/docs/ClangFormat.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("clang-format"),o("OutboundLink")],1),e._v(" which is included with the extension.")]),e._v(" "),o("p",[e._v("You can format an entire file or just the current selection with the "),o("strong",[e._v("Format Code")]),e._v(" command ("),o("code",[e._v("kb(editor.action.format)")]),e._v(") in right-click context menu. You can also configure auto-formatting with the following "),o("RouterLink",{attrs:{to:"/docs/customization/userandworkspace.html"}},[e._v("settings")]),e._v(":")],1),e._v(" "),o("ul",[o("li",[o("code",[e._v("C_Cpp.clang_format_formatOnSave")]),e._v(" - to format when you save your file.")]),e._v(" "),o("li",[o("code",[e._v("editor.formatOnType")]),e._v(" - to format as you type (triggered on the "),o("code",[e._v("kbstyle(;)")]),e._v(" character).")])]),e._v(" "),o("p",[e._v('By default, the clang-format style is set to "file" which means it looks for a '),o("code",[e._v(".clang-format")]),e._v(" file inside your workspace. If the "),o("code",[e._v(".clang-format")]),e._v(" file is found, formatting is applied according the settings specified in the file. If no "),o("code",[e._v(".clang-format")]),e._v(" file is found in your workspace, formatting is applied according to a default style specified in the "),o("code",[e._v("C_Cpp.clang_format_fallbackStyle")]),e._v(" "),o("RouterLink",{attrs:{to:"/docs/customization/userandworkspace.html"}},[e._v("setting")]),e._v(' instead. Currently, the default formatting style is "Visual Studio". Using "Visual Studio" formatting ensures that source code formatting will be compatible in both VS Code and Visual Studio Community.')],1),e._v(" "),o("p",[e._v('The "Visual Studio" clang-format style is not yet an official OOTB clang-format style but it implies the following clang-format settings:')]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[e._v("UseTab"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" (VS Code current setting)\nIndentWidth"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" (VS Code current setting)\nBreakBeforeBraces"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" AllMan\nAllowShortIfStatementsOnASingleLine"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\nIndentCaseLabels"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\nColumnLimit"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n")])])]),o("p",[e._v("If you'd like to use a different version of clang-format than the one that ships with the extension, you can use the "),o("code",[e._v("C_Cpp.clang_format_path")]),e._v(" "),o("RouterLink",{attrs:{to:"/docs/customization/userandworkspace.html"}},[e._v("setting")]),e._v(" and set its value to the path where the clang-format binary is installed.")],1),e._v(" "),o("p",[e._v("For example on the Windows platform:")]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[e._v("  "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"C_Cpp.clang_format_path"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"C:\\\\Program Files (x86)\\\\LLVM\\\\bin\\\\clang-format.exe"')]),e._v("\n")])])]),o("h3",{attrs:{id:"fuzzy-auto-complete-preview"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#fuzzy-auto-complete-preview"}},[e._v("#")]),e._v(" Fuzzy Auto-Complete (preview)")]),e._v(" "),o("p",[e._v("Fuzzy auto-complete is powered by an enhanced tag-parser approach. Although suggestions are not based on semantic analysis of your code, this feature provides a wider selection of matches than the single-file IntelliSense experience provided today.")]),e._v(" "),o("p",[e._v("In particular, this feature's capabilities give a good experience for C code.")]),e._v(" "),o("h2",{attrs:{id:"navigating-code"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#navigating-code"}},[e._v("#")]),e._v(" Navigating Code")]),e._v(" "),o("p",[e._v("The source code navigation features provided by the C/C++ extension are powerful tools for understanding and getting around in your codebase. These features are powered by tags stored in an offline database of symbol information (in the file "),o("code",[e._v("browse.VC.db")]),e._v("). With the C/C++ extension installed, this database is generated whenever a folder containing C++ source code files is loaded into VS Code. The platform indicator (Win32 in the figure below) turns red and appears next to a flame icon while the tag-parser is generating this information.")]),e._v(" "),o("p",[o("img",{attrs:{src:"images/cpp/parsing.png",alt:"The platform indicator during tag parsing"}})]),e._v(" "),o("p",[e._v("When the platform indicator returns to its normal appearance, the source code symbols have been tagged in the offline database and source code navigation features are ready to be used.")]),e._v(" "),o("h3",{attrs:{id:"specifying-additional-include-directories-for-better-symbol-support"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#specifying-additional-include-directories-for-better-symbol-support"}},[e._v("#")]),e._v(" Specifying Additional Include Directories for Better Symbol Support")]),e._v(" "),o("p",[e._v("To provide the best experience, the C/C++ extension for VS Code needs to know where it can find each header file referenced in your code. By default, the extension searches the current source directory, its sub-directories, and some platform-specific locations. If a referenced header file can't be found, VS Code displays a green squiggle underneath each #include directive that references it.")]),e._v(" "),o("p",[e._v("To specify additional include directories to be searched, place your cursor over any #include directive that displays a green squiggle, then click the lightbulb action when it appears. This opens the file "),o("code",[e._v("c_cpp_properties.json")]),e._v(" for editing; here you can specify additional include directories for each platform configuration individually by adding more directories to its 'includePath' property.")]),e._v(" "),o("p",[o("img",{attrs:{src:"images/cpp/includepath.gif",alt:"Adding an additional include path"}})]),e._v(" "),o("h3",{attrs:{id:"search-for-symbols"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#search-for-symbols"}},[e._v("#")]),e._v(" Search for Symbols")]),e._v(" "),o("p",[e._v("You can search for symbols in the current file or workspace to navigate your code more quickly.")]),e._v(" "),o("p",[e._v("To search for a symbol in the current file, press "),o("code",[e._v("kb(workbench.action.gotoSymbol)")]),e._v(", then enter the name of the symbol you're looking for. A list of potential matches will appear and be filtered as you type. Choose from the list of matches to navigate to its location.")]),e._v(" "),o("p",[o("img",{attrs:{src:"images/cpp/filesearch.png",alt:"Searching the current file"}})]),e._v(" "),o("p",[e._v("To search for a symbol in the current workspace, start by pressing "),o("code",[e._v("kb(workbench.action.showAllSymbols)")]),e._v(" instead, then enter the name of the symbol. A list of potential matches will appear as before. If you choose a match that was found in a file that's not already open, the file will be opened before navigating to the match's location.")]),e._v(" "),o("p",[o("img",{attrs:{src:"images/cpp/workspacesearch.png",alt:"Searching in your workspace"}})]),e._v(" "),o("p",[e._v("Alternatively, you can search for symbols by accessing these commands through the "),o("strong",[e._v("Command Palette")]),e._v(" if you prefer. Use "),o("strong",[e._v("Quick Open")]),e._v(" ("),o("code",[e._v("kb(workbench.action.quickOpen)")]),e._v(") then enter the '@' command to search the current file, or the '#' command to search the current workspace. "),o("code",[e._v("kb(workbench.action.gotoSymbol)")]),e._v(" and "),o("code",[e._v("kb(workbench.action.showAllSymbols)")]),e._v(" are just shortcuts for the '@' and '#' commands, respectively, so everything works the same.")]),e._v(" "),o("h3",{attrs:{id:"peek-definition"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#peek-definition"}},[e._v("#")]),e._v(" Peek Definition")]),e._v(" "),o("p",[e._v("You can take a quick look at how a symbol was defined by using the Peek Definition feature. This feature displays a few lines of code near the definition inside a peek window so you can take a look without navigating away from your current location.")]),e._v(" "),o("p",[e._v("To peek at a symbol's definition, place your cursor on the symbol anywhere it's used in your source code and then press "),o("code",[e._v("kb(editor.action.previewDeclaration)")]),e._v(". Alternatively, you can choose "),o("strong",[e._v("Peek Definition")]),e._v(" from the context menu (right-click, then choose "),o("strong",[e._v("Peek Definition")]),e._v(").")]),e._v(" "),o("p",[o("img",{attrs:{src:"images/cpp/peekdefn.png",alt:"Peek definition"}})]),e._v(" "),o("p",[e._v("Currently, the C/C++ extension doesn't parse code in a way that helps it distinguish between competing definitions based on how the symbol is used. These competing definitions arise when the symbol defines different things in different contexts, such as occurs with overloaded functions, classes and their constructors, and other situations. When this happens, each of the competing definitions are listed in the right-hand side of the peek window with the source code of the current selection displayed on the left.")]),e._v(" "),o("p",[e._v("With the peek window open, you browse the list of competing definitions to find the one you're interested in. If you want to navigate to the location of one of the definitions just double-click the definition you're interested in, or by double-clicking anywhere in the source code displayed on the left-hand side of the peek window.")]),e._v(" "),o("h3",{attrs:{id:"go-to-definition"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#go-to-definition"}},[e._v("#")]),e._v(" Go to Definition")]),e._v(" "),o("p",[e._v("You can also quickly navigate to where a symbol is defined by using the Go to Definition feature.")]),e._v(" "),o("p",[e._v("To go to a symbol's definition, place your cursor on the symbol anywhere its used in your code and then press "),o("code",[e._v("kb(editor.action.goToDeclaration)")]),e._v(". Alternatively, you can choose "),o("strong",[e._v("Go to Definition")]),e._v(" from the context menu (right-click, then choose "),o("strong",[e._v("Go to Definition")]),e._v("). When there's only one definition of the symbol, you'll navigate directly to its location, otherwise the competing definitions are displayed in a peek window as described in the previous section and you have to choose the definition that you want to go to.")]),e._v(" "),o("h2",{attrs:{id:"debugging"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#debugging"}},[e._v("#")]),e._v(" Debugging")]),e._v(" "),o("p",[e._v("After you have set up the basics of your debugging environment as specified in "),o("RouterLink",{attrs:{to:"/docs/languages/cpp.html#getting-started"}},[e._v("Getting Started")]),e._v(", you can learn more details about debugging C/C++ in this section.")],1),e._v(" "),o("p",[e._v("VS Code supports the following debuggers for C/C++ depending on the operating system you are using:")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("Linux")]),e._v(": GDB")]),e._v(" "),o("li",[o("strong",[e._v("OS X")]),e._v(": LLDB or GDB")]),e._v(" "),o("li",[o("strong",[e._v("Windows")]),e._v(": the Visual Studio Windows Debugger or GDB (using Cygwin or MinGW)")])]),e._v(" "),o("h3",{attrs:{id:"windows-debugging-with-gdb-on-cygwin-mingw"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#windows-debugging-with-gdb-on-cygwin-mingw"}},[e._v("#")]),e._v(" Windows Debugging with GDB on Cygwin/MinGW "),o("a",{attrs:{name:"debug_windows_gdb"}})]),e._v(" "),o("p",[e._v("You can debug Windows applications created using Cygwin or MinGW by using VS Code. To use Cygwin or MinGW debugging features, the debugger path must be set manually in the launch configuration ("),o("code",[e._v("launch.json")]),e._v("). To debug your Cygwin or MinGW application, add the "),o("code",[e._v("miDebuggerPath")]),e._v(" property and set its value to the location of the corresponding gdb.exe for your Cygwin or MinGW environment.")]),e._v(" "),o("p",[e._v("For example:")]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[e._v("    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"miDebuggerPath"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"c:\\\\mingw\\\\bin\\\\gdb.exe"')]),e._v("\n")])])]),o("p",[e._v("Cygwin/MinGW debugging on Windows supports both attach and launch debugging scenarios.")]),e._v(" "),o("h3",{attrs:{id:"conditional-breakpoints"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#conditional-breakpoints"}},[e._v("#")]),e._v(" Conditional Breakpoints")]),e._v(" "),o("p",[e._v("Conditional breakpoints enable you to break execution on a particular line of code only when the value of the condition is true. To set a conditional breakpoint, right-click on an existing breakpoint and select "),o("strong",[e._v("Edit Breakpoint")]),e._v(". This opens a small peek window where you can enter the condition that must evaluate to true in order for the breakpoint to be hit during debugging.")]),e._v(" "),o("p",[o("img",{attrs:{src:"images/cpp/condbreak.png",alt:"A conditional break"}})]),e._v(" "),o("p",[e._v("In the editor, conditional breakpoints are indicated by a breakpoint symbol that has a black equals sign inside of it. You can place the cursor over a conditional breakpoint to show its condition.")]),e._v(" "),o("h3",{attrs:{id:"function-breakpoints"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#function-breakpoints"}},[e._v("#")]),e._v(" Function Breakpoints")]),e._v(" "),o("p",[e._v("Function breakpoints enable you to break execution at the beginning of a function instead of on a particular line of code. To set a function breakpoint, on the "),o("strong",[e._v("Debug")]),e._v(" pane right-click inside the "),o("strong",[e._v("Breakpoints")]),e._v(" section, then choose "),o("strong",[e._v("Add Function Breakpoint")]),e._v(" and enter the name of the function on which you want to break execution.")]),e._v(" "),o("h3",{attrs:{id:"expression-evaluation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#expression-evaluation"}},[e._v("#")]),e._v(" Expression Evaluation")]),e._v(" "),o("p",[e._v("VS Code supports expression evaluation in several contexts:")]),e._v(" "),o("ul",[o("li",[e._v("You can type an expression into the "),o("strong",[e._v("Watch")]),e._v(" section of the "),o("strong",[e._v("Debug")]),e._v(" panel and it will be evaluated each time a breakpoint is hit.")]),e._v(" "),o("li",[e._v("You can type an expression into the "),o("strong",[e._v("Debug Console")]),e._v(" and it will be evaluated only once.")]),e._v(" "),o("li",[e._v("You can evaluate any expression that appears in your code while you're stopped at a breakpoint.")])]),e._v(" "),o("p",[e._v("Note that expressions in the "),o("strong",[e._v("Watch")]),e._v(" section take effect in the application being debugged; an expression that modifies the value of a variable will modify that variable for the duration of the program.")]),e._v(" "),o("h3",{attrs:{id:"multi-threaded-debugging"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#multi-threaded-debugging"}},[e._v("#")]),e._v(" Multi-threaded Debugging")]),e._v(" "),o("p",[e._v("The C/C++ extension for VS Code has the ability to debug multi-threaded programs. All threads and their call stacks appear in the "),o("strong",[e._v("Call Stack")]),e._v(" section:")]),e._v(" "),o("p",[o("img",{attrs:{src:"images/cpp/threads.png",alt:"Multi-threaded process"}})]),e._v(" "),o("h3",{attrs:{id:"memory-dump-debugging"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#memory-dump-debugging"}},[e._v("#")]),e._v(" Memory Dump Debugging")]),e._v(" "),o("p",[e._v("The C/C++ extension for VS Code also has the ability to debug memory dumps. To debug a memory dump, open your "),o("code",[e._v("launch.json")]),e._v(" file and add the "),o("code",[e._v("coreDumpPath")]),e._v(" (for GDB or LLDB) or "),o("code",[e._v("dumpPath")]),e._v(" (for the Visual Studio Windows Debugger) property to the "),o("strong",[e._v("C++ Launch")]),e._v(" configuration, set its value to be a string containing the path to the memory dump. This will even work for x86 programs being debugged on an x64 machine.")]),e._v(" "),o("h3",{attrs:{id:"additional-symbols"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#additional-symbols"}},[e._v("#")]),e._v(" Additional Symbols")]),e._v(" "),o("p",[e._v("If there are additional directories where the debugger can find symbol files (e.g., "),o("code",[e._v(".pdb")]),e._v(" files for the Visual Studio Windows Debugger), they can be specified by adding the "),o("code",[e._v("additionalSOLibSearchPath")]),e._v(" (for GDB or LLDB) or "),o("code",[e._v("symbolSearchPath")]),e._v(" (for the Visual Studio Windows Debugger).")]),e._v(" "),o("p",[e._v("For example:")]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[e._v("    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"additionalSOLibSearchPath"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/path/to/symbols;/another/path/to/symbols"')]),e._v("\n")])])]),o("p",[e._v("or")]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[e._v("    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"symbolSearchPath"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"C:\\\\path\\\\to\\\\symbols;C:\\\\another\\\\path\\\\to\\\\symbols"')]),e._v("\n")])])]),o("h3",{attrs:{id:"gdb-lldb-and-mi-commands-gdb-lldb"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#gdb-lldb-and-mi-commands-gdb-lldb"}},[e._v("#")]),e._v(" GDB, LLDB and MI Commands (GDB/LLDB)")]),e._v(" "),o("p",[e._v("For the "),o("code",[e._v("C++ (GDB/LLDB)")]),e._v(" debugging environment, you can execute GDB, LLDB and MI commands directly through the debug console with the "),o("code",[e._v("-exec")]),e._v(" command, but be careful, executing commands directly in the debug console is untested and might crash VS Code in some cases.")]),e._v(" "),o("h3",{attrs:{id:"other-debugging-features"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#other-debugging-features"}},[e._v("#")]),e._v(" Other Debugging Features")]),e._v(" "),o("ul",[o("li",[e._v("Unconditional breakpoints")]),e._v(" "),o("li",[e._v("Watch window")]),e._v(" "),o("li",[e._v("Call stack")]),e._v(" "),o("li",[e._v("Stepping")])]),e._v(" "),o("p",[e._v("For more information on debugging with VS Code, see this introduction to "),o("RouterLink",{attrs:{to:"/docs/editor/debugging.html"}},[e._v("debugging in VS Code")]),e._v(".")],1),e._v(" "),o("h2",{attrs:{id:"known-limitations"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#known-limitations"}},[e._v("#")]),e._v(" Known Limitations")]),e._v(" "),o("h3",{attrs:{id:"symbols-and-code-navigation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#symbols-and-code-navigation"}},[e._v("#")]),e._v(" Symbols and Code Navigation")]),e._v(" "),o("p",[e._v("All platforms:")]),e._v(" "),o("ul",[o("li",[e._v("Because the extension doesn't parse function bodies, Peek Definition and Go to Definition don't work for symbols defined inside the body of a function.")])]),e._v(" "),o("h3",{attrs:{id:"debugging-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#debugging-2"}},[e._v("#")]),e._v(" Debugging")]),e._v(" "),o("p",[e._v("All platforms:")]),e._v(" "),o("ul",[o("li",[e._v("There is no way to specify the source file mappings from the compiled locations to the current location. This prevents debugging an application in a different file system layout than where it was compiled.")])]),e._v(" "),o("p",[e._v("Windows:")]),e._v(" "),o("ul",[o("li",[e._v("GDB on Cygwin and MinGW cannot break a running process. To set a breakpoint when the application is running (not stopped under the debugger), or to pause the application being debugged, press "),o("code",[e._v("kbstyle(Ctrl-C)")]),e._v(" in the application's terminal.")]),e._v(" "),o("li",[e._v("GDB on Cygwin cannot open core dumps.")])]),e._v(" "),o("p",[e._v("Linux:")]),e._v(" "),o("ul",[o("li",[e._v("GDB needs elevated permissions to attach to a process. When using "),o("em",[e._v("attach to process")]),e._v(", you need to provide your password before the debugging session can begin.")])]),e._v(" "),o("p",[e._v("OS X:")]),e._v(" "),o("ul",[o("li",[e._v("LLDB:\n"),o("ul",[o("li",[e._v("When debugging with LLDB, if the Terminal window is closed while in break mode, debugging does not stop. Debugging can be stopped by pressing the "),o("strong",[e._v("Stop")]),e._v(" button.")]),e._v(" "),o("li",[e._v("When debugging is stopped the Terminal window is not closed.")])])]),e._v(" "),o("li",[e._v("GDB:\n"),o("ul",[o("li",[e._v("Additional manual install steps need to be completed to use GDB on OS X. See "),o("em",[e._v("Manual Installation of GDB for OS X")]),e._v(" in the "),o("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools",target:"_blank",rel:"noopener noreferrer"}},[e._v("README"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("li",[e._v("When attaching to a process with GDB, the application being debugged cannot be interrupted. GDB will only bind breakpoints set while the application is not running (either before attaching to the application, or while the application is in a stopped state). This is due to "),o("a",{attrs:{href:"https://sourceware.org/bugzilla/show_bug.cgi?id=20035",target:"_blank",rel:"noopener noreferrer"}},[e._v("a bug in GDB"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("li",[e._v("Core dumps cannot be loaded when debugging with GDB because GDB "),o("a",{attrs:{href:"https://www.sourceware.org/ml/gdb/2014-01/msg00036.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("does not support the core dump format used in OS X"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("li",[e._v("When attached to a process with GDB, break-all will end the process.")])])])]),e._v(" "),o("h2",{attrs:{id:"next-steps"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#next-steps"}},[e._v("#")]),e._v(" Next Steps")]),e._v(" "),o("p",[e._v("Read on to find out about:")]),e._v(" "),o("ul",[o("li",[o("RouterLink",{attrs:{to:"/docs/editor/editingevolved.html"}},[e._v("Editing Evolved")]),e._v(" - find out more about advanced editing features")],1),e._v(" "),o("li",[o("RouterLink",{attrs:{to:"/docs/editor/tasks.html"}},[e._v("Tasks")]),e._v(" - use tasks to build your project and more")],1),e._v(" "),o("li",[o("RouterLink",{attrs:{to:"/docs/editor/debugging.html"}},[e._v("Debugging")]),e._v(" - find out how to use the debugger with your project")],1)]),e._v(" "),o("h2",{attrs:{id:"common-questions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#common-questions"}},[e._v("#")]),e._v(" Common Questions")]),e._v(" "),o("p",[o("strong",[e._v("Q: My project won't load.")])]),e._v(" "),o("p",[o("strong",[e._v("A:")]),e._v(" VS Code doesn't currently support C++ project files, instead it considers a directory of your choosing to be the workspace of your project. Source code files inside that directory and its sub-directories are part of the workspace.")]),e._v(" "),o("p",[o("strong",[e._v("Q: IntelliSense isn't working.")])]),e._v(" "),o("p",[o("strong",[e._v("A:")]),e._v(" In this release, IntelliSense isn't supported. We plan to enable this and other features in future releases.")]),e._v(" "),o("p",[o("strong",[e._v("Q: How do I build/run my project?")])]),e._v(" "),o("p",[o("strong",[e._v("A:")]),e._v(" VS Code supports tasks that you can configure to build your application, and natively understands the output of MSBuild, CSC, and XBuild. For more information, see the "),o("RouterLink",{attrs:{to:"/docs/editor/tasks.html"}},[e._v("Tasks")]),e._v(" documentation.")],1),e._v(" "),o("p",[o("strong",[e._v("Q: Why is there a .browse.VC.db file in my workspace?")])]),e._v(" "),o("p",[o("strong",[e._v("A:")]),e._v(" The C/C++ extension automatically creates a database of symbol information for your workspace and stores it in a "),o("code",[e._v(".browse.VC.db")]),e._v(" file in your workspace's "),o("code",[e._v(".vscode")]),e._v(" folder. This improves the extension's performance and this file should not be added to source control.")]),e._v(" "),o("p",[e._v("If you have any other questions or run into any issues, please file an issue on "),o("a",{attrs:{href:"https://github.com/Microsoft/vscode-cpptools/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),o("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=a.exports}}]);